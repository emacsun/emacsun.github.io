<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZCL.SPACE on ZCL.SPACE</title>
    <link>https://zcl.space/</link>
    <description>Recent content in ZCL.SPACE on ZCL.SPACE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 ZCL</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Organize you life in Emacs Org</title>
      <link>https://zcl.space/tools/organize-you-life-in-org/</link>
      <pubDate>Sun, 11 Feb 2018 21:52:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/organize-you-life-in-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#my-gtd-workflow&#34;&gt;My GTD workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#some-preparations&#34;&gt;some preparations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#set-the-agenda-file&#34;&gt;set the agenda file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#set-the-refile-targets&#34;&gt;set the refile targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#set-the-org-capture-templates&#34;&gt;set the org capture templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; &lt;a href=&#34;#set-the-org-agenda-custom-commands&#34;&gt;set the org agenda custom commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#one-day-based-on-my-workflow&#34;&gt;One day based on my workflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; &lt;a href=&#34;#punch-in&#34;&gt;Punch In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; &lt;a href=&#34;#check-out-the-agenda&#34;&gt;check out the agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; &lt;a href=&#34;#focus-on-certain-project&#34;&gt;focus on certain project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; &lt;a href=&#34;#change-the-state-of-one-task&#34;&gt;change the state of one task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; &lt;a href=&#34;#using-the-mobile-phone-to-take-capture&#34;&gt;using the mobile phone to take capture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#conclusion&#34;&gt;conclusion&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; introduction&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&#34;http://spacemacs.org/&#34; target=&#34;_blank&#34;&gt;spacemacs&lt;/a&gt; I divide my Org config into servel private layers for
the sake of easy maintenance and flexibility. You can check my
&lt;a href=&#34;https://github.com/emacsun/.spacemacs.d&#34; target=&#34;_blank&#34;&gt;.spacemacs.d&lt;/a&gt; on github. I suggest you excerpt some of my config
instead of copying all of them because some of them maybe not what you
want.&lt;/p&gt;

&lt;p&gt;Based on the comprehensive tutorial &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt;,
I build my own GTD system using Org. Actually, there exists quite a
few posts on building personal GTD system through Emacs Org. Some
excellent ones are listed as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; . This article is the starting
point of my serious using of Emacs Org as GTD tool. It is quite
long, but deserves spending time to read it. It pays off.
Furthermore, reading just one time is not enough. Perhaps you
will visit this post several times before your GTD system is
handy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/&#34; target=&#34;_blank&#34;&gt;Using org-mode as a Day Planner&lt;/a&gt; . This article describe how the
author replace pen-and-paper day planner with the Emacs Org.
After trying many software available, the author choose Emacs
Org.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html&#34; target=&#34;_blank&#34;&gt;How I use Emacs and Org-mode to implement GTD&lt;/a&gt; . The author&amp;rsquo;s job
is developing classroom training materials and E-Learning
solutions for a software company based in North Sydney. It&amp;rsquo;s
also worthwhile to give the article a shot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am not interested in listing all the articles. What I want to say
is that you need to define your need first. After that you can
excerpt the config from other&amp;rsquo;s implement. Most of the time you
will modify other&amp;rsquo;s config before Org is handy for you. So some
knowledge of Elisp is desirable.&lt;/p&gt;

&lt;h2 id=&#34;my-gtd-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; My GTD workflow&lt;/h2&gt;

&lt;p&gt;First let me introduce my GTD workflow. In general, a task in my GTD
workflow will go the road shown as below whick is the same as show in
&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; but with different triggering
conditions:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org60a044f&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210myworkflow.png&#34; alt=&#34;state transitions for a task in my workflow&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        state transitions for a task in my workflow
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The main features are listed below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every moment, for the sake of clearing my head, I capture all the
ideas or some todos jumping into my head during my handling one
event. I will handle the capture later.&lt;/li&gt;
&lt;li&gt;Every morning, I check the my agenda which is generated by a
combination of ten commends.&lt;/li&gt;
&lt;li&gt;I check the scheduled tasks and the tasks which is near the
deadline.&lt;/li&gt;
&lt;li&gt;After the scheduled one and the deadlined one, I take a &lt;code&gt;NEXT&lt;/code&gt;
task, which is in &lt;code&gt;NEXT&lt;/code&gt; status. Also, I start a clock under such
task.&lt;/li&gt;
&lt;li&gt;After finishing the &lt;code&gt;NEXT&lt;/code&gt; tasks, the &lt;code&gt;NEXT&lt;/code&gt; status will be changed
to &lt;code&gt;DONE&lt;/code&gt; automatically. Then I pick a new task in the &lt;code&gt;TODO&lt;/code&gt; lists
and change the &lt;code&gt;TODO&lt;/code&gt; status into &lt;code&gt;NEXT&lt;/code&gt;. Everytime I change a
&lt;code&gt;TODO&lt;/code&gt;  task into a &lt;code&gt;NEXT&lt;/code&gt; task, clock is running under that task
automatically.&lt;/li&gt;
&lt;li&gt;After finishing all the &lt;code&gt;TODO&lt;/code&gt; tasks, I check the &lt;code&gt;DONE&lt;/code&gt; list to see
if there is any tasks need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;some-preparations&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; some preparations&lt;/h2&gt;

&lt;p&gt;In order to run the GTD, some preparations are needed.&lt;/p&gt;

&lt;h3 id=&#34;set-the-agenda-file&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; set the agenda file&lt;/h3&gt;

&lt;p&gt;To use Org as a GTD tool, the first thing is to setup the
&lt;code&gt;org-agenda-files&lt;/code&gt; ;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;set up the agenda files
(setq org-agenda-files (list &amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I put my configs into the Dropbox directory, so that
my config will never lose even if I delete them from the local
carelessly.&lt;/p&gt;

&lt;p&gt;Notice that there is a file named &amp;ldquo;zrefile.org&amp;rdquo; which is the entrance
of all my todos and some other captures. It plays as an inbox.
Everytime I check this file and take actions to clean it. All this can
be done in the agenda buffer, which I will explain later. To refile
the items in the refile.org, I need to set up the refile targets.&lt;/p&gt;

&lt;h3 id=&#34;set-the-refile-targets&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; set the refile targets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-refile-targets (quote (
          (&amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; :maxlevel . 6))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, besides the zwork.org and zlife.org which are the agenda
files, there are other five org files. These five org files are for my
personal blog. Sometime, I capture a draft or outline of a new post in
the zrefile.org, so I need to refile these drafts into the right
category.&lt;/p&gt;

&lt;p&gt;To understand why I add these extra five org files as the refile
targets, you need to see my &lt;code&gt;org-capture-templates&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-capture-templates&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; set the org capture templates&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39;(
        (&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;h&amp;quot; &amp;quot;Hugo post&amp;quot;)
        (&amp;quot;hm&amp;quot; &amp;quot;Math&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; &amp;quot;Math&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         &amp;quot;:math:&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;hc&amp;quot; &amp;quot;Computer&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; &amp;quot;Computer&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ht&amp;quot; &amp;quot;Telecommunication&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; &amp;quot;Telecommunication&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;Life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ho&amp;quot; &amp;quot;Tools&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; &amp;quot;Tools&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hm&amp;quot; &amp;quot;movie&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Movie&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
         (&amp;quot;l&amp;quot; &amp;quot;my Log Time&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot; ) &amp;quot;** %T - %?  :timelog:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;d&amp;quot; &amp;quot;diary&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot; ) &amp;quot;* %t - %?  :diary:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;x&amp;quot; &amp;quot;org-protocol&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO Review %c \n Added:%T\n&amp;quot;)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have a template for &lt;code&gt;zrefile.org&lt;/code&gt; which is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
 &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
 :clock-in t :clock-resume t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand the meaning of this template, you need to read the doc
for variable &lt;code&gt;org-capture-templates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;whenever I check the org-agenda, I will see a block contains all the
need-to-refile tasks. So you may curious about my set of
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-agenda-custom-commands&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; set the org agenda custom commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-agenda-custom-commands
        (quote (
                (&amp;quot; &amp;quot; &amp;quot;Agenda&amp;quot;
                 ((agenda &amp;quot;&amp;quot; )
                  (tags &amp;quot;NOTES&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;NOTES to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags &amp;quot;REFILE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo &amp;quot;-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Stuck Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-HOLD-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-CANCELLED/!NEXT&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Project NEXT Tasks&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down todo-state-down effort-up category-keep))))
                  (todo &amp;quot;TODO&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks TODO&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  (todo &amp;quot;DONE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks DONE&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  ;;;;(tags-todo &amp;quot;-CANCELLED+WAITING+HOLD/!&amp;quot;
                  (todo &amp;quot;HOLD&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Waiting and Postponed Tasks&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-stuck-projects)
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-todo-ignore-scheduled &#39;future)
                         (org-agenda-todo-ignore-deadlines &#39;future)))
                  (tags &amp;quot;-REFILE/&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Archive&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should never copy the above snippet, because there are some
functions whose definitions are not contained in the snippet.
Actually, you should go to my Github page to get the repository if you
are interested in my .spacemacs.d&lt;/p&gt;

&lt;p&gt;According to the command, one of the sample of my org agenda may look
like:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgce6e879&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda.png&#34; alt=&#34;my org agenda sample&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        my org agenda sample
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I have three projects: math,computer and communication
(telecommunication). For each projects, there are some tasks. All the
projects appear as level-1 headlines in the org file and the tasks
appear as sub-level headlines. If all the tasks under one project are
in &lt;code&gt;TODO&lt;/code&gt; state, the project is stuck. If at least one of the task
under one project is in &lt;code&gt;NEXT&lt;/code&gt; state, the project is running.&lt;/p&gt;

&lt;p&gt;I think the structure of my agenda buffer is straightforward. you can
define your own &lt;code&gt;org-agenda-custom-commands&lt;/code&gt; by reading the manual and
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;one-day-based-on-my-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; One day based on my workflow&lt;/h2&gt;

&lt;h3 id=&#34;punch-in&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; Punch In&lt;/h3&gt;

&lt;p&gt;At the beginning of every day, I use &lt;code&gt;F8 I&lt;/code&gt; to punch in, which starts
a clock under a task called Organization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defvar bh/organization-task-id &amp;quot;eb155a82-92b2-4f25-a3c6-0304591af2f9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-out-the-agenda&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; check out the agenda&lt;/h3&gt;

&lt;p&gt;Check out the agenda, using &lt;code&gt;org-agenda&lt;/code&gt; which is bound to &lt;code&gt;SPC a o o
SPC&lt;/code&gt; or &lt;code&gt;SPC o a SPC&lt;/code&gt; or &lt;code&gt;F5 SPC&lt;/code&gt; . Because the &lt;code&gt;org-agenda&lt;/code&gt; buffer
will be visited quite a few times, I bind this command to several
shortcuts. Using the customed command &lt;code&gt;SPC&lt;/code&gt; , I collect all the
projects,  tasks with &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;NEXT&lt;/code&gt; states in the project which
give me an overview of what should be done next and what should be
started next.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org44a51bf&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda2.png&#34; alt=&#34;my org agenda overview&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        my org agenda overview
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As we can see from the screenshot, the agenda of today is listed at
the beginning with scheduled task and deadline task.&lt;/p&gt;

&lt;p&gt;Following today&amp;rsquo;s agenda, several blocks are displayed with each
headline in green color and large font size. Those blocks shows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Notes to Refile&lt;/strong&gt;, which is the draft of a post which should be
refile to math.org computer.org or telecommunication.org.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Refile&lt;/strong&gt;, which is the Ideas or tasks hitting my head
during handling one tasks. I store these tasks in zrefile.org then
process them later after finishing current tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stuck Projects&lt;/strong&gt;, which are the projects have no sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projects&lt;/strong&gt;, which are the projects have at least one sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Next Tasks&lt;/strong&gt;, which are &lt;code&gt;NEXT&lt;/code&gt; sub-tasks in all Projects.
In particular, you can filter out the &lt;code&gt;NEXT&lt;/code&gt; tasks belonging to
certain project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks TODO&lt;/strong&gt;, which are all the &lt;code&gt;TODO&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks DONE&lt;/strong&gt;, which are all the &lt;code&gt;DONE&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waiting and Postponed Tasks&lt;/strong&gt;, which are all the tasks in &lt;code&gt;WAITING&lt;/code&gt;
and &lt;code&gt;HOLD&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Archive&lt;/strong&gt;, which are the tasks being tagged as &lt;code&gt;DONE&lt;/code&gt; for
a period and need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;focus-on-certain-project&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; focus on certain project&lt;/h3&gt;

&lt;p&gt;If you have many &lt;code&gt;TODO&lt;/code&gt; tasks, it is desirable to focus on certain
project at one time. Just move the cursor on the Project you want to
focus, then press &lt;code&gt;^&lt;/code&gt; . If you want to focus on another project, press
&lt;code&gt;^&lt;/code&gt; again then select another project, press &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org0626b05&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda3.png&#34; alt=&#34;focus on certain project&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        focus on certain project
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Actually, there are quite a few commands helping you coin your own
view of the agenda buffer. some handy are listed below:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org22a9818&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  some handy agenda commands
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;shortcuts&lt;/th&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-tag&lt;/td&gt;
&lt;td&gt;Filter the agenda view with respect to a tag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-category&lt;/td&gt;
&lt;td&gt;Filter the current agenda view with respect to the category of the item at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-top-headline&lt;/td&gt;
&lt;td&gt;Filter the current agenda view and only display the siblings and the parent headline of the one at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-regexp&lt;/td&gt;
&lt;td&gt;Filter the agenda view by a regular expression&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-effort&lt;/td&gt;
&lt;td&gt;filter the agenda view with respect to effort estimates&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can find more agenda commands by reading &lt;code&gt;Agenda views&lt;/code&gt; part of
the Org manual which is built in the Emacs.&lt;/p&gt;

&lt;h3 id=&#34;change-the-state-of-one-task&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; change the state of one task&lt;/h3&gt;

&lt;p&gt;It is quite easy to change the state of one task. By default, the
state is in &lt;code&gt;TODO&lt;/code&gt; state. After start clocking the task, the task will
be in &lt;code&gt;NEXT&lt;/code&gt; state automatically.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;NEXT&lt;/code&gt; to other state, you just use &lt;code&gt;C-c C-t&lt;/code&gt; . If you are in the
org agenda buffer, press &lt;code&gt;t&lt;/code&gt; one the line of the task.&lt;/p&gt;

&lt;p&gt;Once the task is set as &lt;code&gt;DONE&lt;/code&gt; , a temporary buffer will jump out and
let you take some note to record the task.&lt;/p&gt;

&lt;h3 id=&#34;using-the-mobile-phone-to-take-capture&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; using the mobile phone to take capture&lt;/h3&gt;

&lt;p&gt;In general, there are two app one is &lt;code&gt;Org-mobile&lt;/code&gt; and the another one
is &lt;code&gt;BeOrg&lt;/code&gt;. I prefer to the later because of is easy to use. All you
have to do is put your agenda files in a Dropbox directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Org-mobile&lt;/code&gt; is kind of complex, and need to config both on the phone
and the PC. I finally make it run on both my iPhone and Surface pro 4.
However, I resort to &lt;code&gt;BeOrg&lt;/code&gt; because you will never forget how to use
&lt;code&gt;BeOrg&lt;/code&gt; . Unfortunately, I forget how to use &lt;code&gt;Org-mobile&lt;/code&gt; after I did
not use it for a month.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; conclusion&lt;/h2&gt;

&lt;p&gt;My GTD workflow based on Org is summarized. To be honest, I change my
workflow quite often. So the configuration will change subsequently
which is the source of joy using Emacs. You can always config it as
handy as possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Density Evolution</title>
      <link>https://zcl.space/telecommunication/density-evolution/</link>
      <pubDate>Wed, 07 Feb 2018 20:02:00 +0800</pubDate>
      
      <guid>https://zcl.space/telecommunication/density-evolution/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#density-evolution-on-the-bec&#34;&gt;Density evolution on the BEC&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#regular-ldpc-codes&#34;&gt;Regular LDPC codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#irregular-ldpc-codes&#34;&gt;Irregular LDPC codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#threshold-and-stability-of-density-evolution-on-bec&#34;&gt;threshold and stability of density evolution on BEC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#density-evolution-on-general-memoryless-channels&#34;&gt;Density evolution on general memoryless channels&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; &lt;a href=&#34;#get-an-excellent-degree-distribution&#34;&gt;get an excellent degree distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;For a given Tanner graph, it is still an open question to tell for
which channel noise level the message passing algorithm will be able
to reach a reliable transmission. Fortunately, it is possible to tell
how an ensemble of Tanner graphs is likely to behave given that the
channel is memoryless and the Tanner graphs are all cycle free. We
could do this by tracking the evolution of probability density
functions during the message passing procedure. We call this method
&lt;strong&gt;Density Evolution&lt;/strong&gt; which is first invented by Richardson and Urbanke
in their papers in 2001.&lt;/p&gt;

&lt;p&gt;Now there are some effective ways to decide whether a LDPC ensemble is
good or not, but most of them are based on density evolution. We
define &lt;strong&gt;threshold&lt;/strong&gt; as the maximum level of channel noise under which
the MPA(message passing algorithm) can reach a reliable transmission.
By watching the threshold, we can design some excellent LDPC ensemble,
from which a good LDPC matrix can be selected.&lt;/p&gt;

&lt;h2 id=&#34;density-evolution-on-the-bec&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Density evolution on the BEC&lt;/h2&gt;

&lt;p&gt;On the BEC, an erased bit can be corrected if that bit was the only
bit in the parity check equation. We assume that the MPA is passing
messages down through the layers of a Tanner graph which is a tree.
Under such assumption the bit-to-check message to check node in a
lower level of the graph is determined by the check-to-bit message
from all the incoming edges in the level above.&lt;/p&gt;

&lt;h3 id=&#34;regular-ldpc-codes&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; Regular LDPC codes&lt;/h3&gt;

&lt;p&gt;Problem: given an ensemble \(\mathcal{T}(w_{c},w_{r})\), which sonsists of all
regular LDPC Tanner graphs with bit nodes of degree \(w_{c}\) and check nodes of
degree \(w_{r}\), show the maximum erasure probability at which the MPA can
recover all the erasure bit.&lt;/p&gt;

&lt;p&gt;For BEC, the message hold either the current value of the bit ( can be &amp;ldquo;1&amp;rdquo; or
&amp;ldquo;0&amp;rdquo;) or &amp;ldquo;x&amp;rdquo; (the bit value is unknown). Define \(q_{l}\) as the probability that
at iteration \(l\) a check to bit message is an \(x\) and \(p_{l}\) as the
probability that at iteration \(l\) a bit to check message is an \(x\).&lt;/p&gt;

&lt;p&gt;For a regular LDPC ensemble, the C2B (check to bit) message on an edge is \(x\)
if one or more of the incoming messages on the other \(w_{r} - 1\) edges into
that check node is an \(x\). Suppose that all the incoming messages are
identical and independent of each other, i.e. they have i.i.d. So,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:2}
q_{l} = 1 - (1-p_{l})^{(w_{r} - 1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;At iteration \(l\), the B2C message will be \(x\) if the origin message from the
channel was an erasure and all the incoming message from check at iteration
\(l-1\) are erasures. So,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq3}
p_{l} = \epsilon(q_{l-1})^{w_{c} - 1}
\end{equation}&lt;/p&gt;

&lt;p&gt;Here, \(\epsilon\) is the probability of \(x\) for the origin message from the
channel. We use \(w_{c} - 1\) instead of \(w_{c}\), because we have to remove
the message coming from the check node to which the bit node will send the new
message. We do this to make the messages uncorrelated.&lt;/p&gt;

&lt;p&gt;Combining the \(q_{l}\) and \(p_{l}\), we get:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:6}
p_{l} = \epsilon \big( 1 - (1-p_{l-1})^{(w_{r} - 1)}\big)^{(w_{c} -1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;Before the iteration, we have \(p_{0} = \epsilon\) which is the probability that
a bit is erased by the channel.&lt;/p&gt;

&lt;p&gt;Thus, for a \((w_{c},w_{r})\) regular ensemble, we have a recursion:&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:3}
p_{0}&amp;amp;=&amp;amp;\epsilon \newline
p_{l}&amp;amp;=&amp;amp; \epsilon \big( 1 - (1-p_{l-1})^{(w_{r} - 1)}\big)^{(w_{c} -1)}
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;The above recursion describes how the erasure probability of MPA evolves as a
function of the iteration number \(l\). For example, we can find that with
\(\epsilon = 0.3\) the decoder can correct the erasure after \(l = 7\). With \(l
\to \infty\), we find that \(\epsilon \in (0.4293,0.4294)\) is OK. So we can say
that the threshold for a \((3,6)\) regular LDPC code is between \(0.4293\) and
\(0.4294\).&lt;/p&gt;

&lt;h3 id=&#34;irregular-ldpc-codes&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Irregular LDPC codes&lt;/h3&gt;

&lt;p&gt;For an irregular LDPC codes, the columns and rows have varying weights. So we
describe an irregular LDPC ensemble in a different way. We designated the
fraction of columns of weight \(i\) by \(v_{i}\) and the fraction of rows of
weight \(i\) by \(h_{i}\). An irregular LDPC ensemble can be described using
\(v_{i}\) and \(h_{i}\)&lt;/p&gt;

&lt;p&gt;To develop the irregular version of density evolution, we define fraction of
edges connecting to degree-\(i\) bit nodes as \(\lambda_{i}\) and \(\rho_{i}\)
the fraction of edges connecting to degree-\(i\) check nodes.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to get:&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:7}
\sum_{i}\lambda_{i}&amp;amp;=&amp;amp; 1 \newline
\sum_{i}\rho_{i} &amp;amp;=&amp;amp; 1
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;We also define the &lt;strong&gt;degree distrubution functions&lt;/strong&gt; as:&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:8}
\lambda(x)&amp;amp;=&amp;amp;\lambda_{2} x + \lambda_{3}x^{2} + \ldots + \lambda_{i}x^{i-1} + \ldots \newline
\rho(x) &amp;amp;=&amp;amp; \rho_{2}(x) + \rho_{3}x^{2} + \ldots + \rho_{i}x^{i-1} + \ldots
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;We can transform between node degrees and edge degrees by:&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq9}
v_{i}&amp;amp;=&amp;amp; \frac{\lambda_{i}/i}{\sum_{j}\lambda_{j}/j} \newline
h_{i}&amp;amp;=&amp;amp; \frac{\rho_{i}/i}{\sum_{j}\rho_{j}/j}
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;About the above equation, take
\[v_{i}=\frac{\lambda_{i}/i}{\sum_{j}\lambda_{j}/j} \] for example,
suppose the number of degree \(i\) bit nodes is \(n_{i}\), so
\(\lambda_{i} = \frac{ n_{i} i }{\sum_{j}n_{j}j} \). Then&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:1}
\lambda_{i}/i  = \frac{n_{i}}{\sum_{j}n_{j}j}
\end{equation}&lt;/p&gt;

&lt;p&gt;Thus,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:9}
\sum_{k}\lambda_{k}/k = \sum_{k} \frac{n_{k}}{\sum_{j}n_{j}j}
\end{equation}&lt;/p&gt;

&lt;p&gt;Then,&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:10}
\frac{\lambda_{i}/i}{\sum_{k} \lambda_{k}/k } &amp;amp;=&amp;amp; \frac{ \frac{n_{i}}{\sum_{j}n_{j}j}  }{ \sum_{k} \frac{n_{k}}{\sum_{j}n_{j}j}} \newline
&amp;amp;=&amp;amp; \frac{n_{i}}{\sum_{k}n_{k}} \newline
&amp;amp;=&amp;amp; v_{i}
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;At the regular LDPC codes section, we get that, at the \(l\)
iteration of MPA decoding, the probability that C2B is \(x\), is:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:11}
q_{l} = 1- (1-p_{l})^{(w_{r} -1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;for an edge connected to a degree \(w_{r}\) check node. When it comes
to an irregular Tanner graph, the probability that an edge is
connected to a degree \(w_{r}\) check node is \( \rho_{w_{r}} \).&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:12}
q_{l} =\sum_{i} \rho_{i} ( 1 - (1-p_{l})^{(i-1)} ) = 1 - \sum_{i}\rho_{i} (1-p_{l})^{(i-1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;Before, we define&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:13}
\rho(x) = \rho_{2}(x) + \rho_{3}x^{2} + \ldots + \rho_{i}x^{i-1} + \ldots
\end{equation}&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:14}
q_{l} = 1-\rho(1-p_{l})
\end{equation}&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s check the \(p_{l}\). In the regular LDPC codes on BEC with
erasure probability \(\epsilon\), at the \(l\)-th iteration of MPA
decoding if all incoming messages are independent, is :&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:15}
p_{l} = \epsilon (q_{l-1})^{(w_{c} -1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;When it comes to irregular LDPC codes with the probability that an
edge is connected to a bit node of degree \(w_{c}\) is
\(\lambda_{w_{c}}\), the \(p_{l}\) can be derived in a straightforward
way:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:16}
p_{l} = \epsilon\sum_{i}\lambda_{i} (q_{l-1})^{i-1}
\end{equation}&lt;/p&gt;

&lt;p&gt;We also have the definition of \(\lambda(x)\), So,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:17}
p_{l} = \epsilon \lambda(q_{l-1})
\end{equation}&lt;/p&gt;

&lt;p&gt;At last, we get&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:18}
p_{l} = \epsilon \lambda \big( 1- \rho(1-p_{l-1}) \big)
\end{equation}&lt;/p&gt;

&lt;p&gt;with \(p_{0}=\epsilon\)&lt;/p&gt;

&lt;h2 id=&#34;threshold-and-stability-of-density-evolution-on-bec&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; threshold and stability of density evolution on BEC&lt;/h2&gt;

&lt;p&gt;According to \ref{eq:18}, we can evaluate the ensemble code with given
degree distribution \(\lambda,\rho\) assuming that the graphs are
cycle free.&lt;/p&gt;

&lt;p&gt;To examine the influence of \(\epsilon\), we define the function:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:24}
f(p,\epsilon) = \epsilon\lambda(1- \rho(1-p))
\end{equation}&lt;/p&gt;

&lt;p&gt;The erasure probability at iteration \(l\) is then&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:25}
p_{l}(\epsilon) = f(p_{l-1},\epsilon)
\end{equation}&lt;/p&gt;

&lt;p&gt;\(f(p,\epsilon)\) is a strictly increasing function in \(p\) for
\(\epsilon &amp;gt; 0\) so \(p_{l+1} &amp;gt; p_{l}\).&lt;/p&gt;

&lt;p&gt;In particular,&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:26}
f(0,\epsilon)&amp;amp;=&amp;amp;\epsilon \lambda(1-\rho(1)) = 0 &lt;br /&gt;
f(1,\epsilon)&amp;amp;=&amp;amp;\epsilon \lambda(1-\rho(1-1)) = \epsilon
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;Since \(f(p,\epsilon)\) is a strictly increasing function in \(p\)&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:27}
0 \leq f(p,\epsilon) \leq \epsilon, \quad \forall p\in [0,1], \forall \epsilon\in [0,1]
\end{equation}&lt;/p&gt;

&lt;p&gt;Thus, \(p_{\infty}\) will definitely converges to an element
\(p_{\infty} \in [0,\epsilon]\).Further, for a degree distribution
pair \(\lambda,\rho\) and an \(\epsilon\in [0,1]\), it can be proven
that if \(p_{l}(\epsilon) \to 0\) then \(p_{l}(\epsilon^{&amp;lsquo;}) \to 0\)
for all \(\epsilon &amp;lt; \epsilon^{&amp;lsquo;}\). Indeed, there is a value
\(\epsilon^{*}\) called the threshold such that for values of
\(\epsilon\) below \(\epsilon^{*}\), \(p_{l}\) approaches zero as the
number of iterations goes to infinity while for values of \(\epsilon &amp;gt;
\epsilon^{*}\) it does not. The threshold, \(\epsilon^{*}\), for
\((\lambda,\rho)\) is defined as the supremum of \(\epsilon\) for
which \(p_{l}(\epsilon) \to 0\):&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:28}
\epsilon^{*} (\lambda,\rho) = \sup { \epsilon\in [0.1] :p_{l}(\epsilon)_{l\to \infty} \to 0 }
\end{equation}&lt;/p&gt;

&lt;p&gt;We wish to find the threshold of an irregular LDPC ensemble with
degree distributions:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:29}
\lambda(x) = 0.1x + 0.4x^{2} + 0.5x^{19}
\end{equation}&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:30}
\rho(x) = 0.5 x^{7} + 0.5 x^{8}
\end{equation}&lt;/p&gt;

&lt;p&gt;This code has rate:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:31}
1- \frac{\sum_{i}\lambda_{i}/i}{\sum_{i}\rho_{i}/i} \approx 0.5
\end{equation}&lt;/p&gt;

&lt;p&gt;By using the recursion of Density evolution, we find that the
threshold for this ensemble is an erasure probability between 0.465
and 0.475.&lt;/p&gt;

&lt;p&gt;It is easy to find that the density evolution quickly results in very
high order as the iteration number is increased. However, to
understand its behavior when \(p_{l}\) is small we can approximate it
by a Taylor series expansion of the right hand side around 0. i.e.&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:32}
p_{l} = f(p_{l-1},\epsilon)\approx f^{&amp;lsquo;}(p,\epsilon) p_{l-1}
\end{equation}&lt;/p&gt;

&lt;p&gt;A function \(f(x) = g(h(x))\) has a derivative with respect to \(x\)
given by:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:34}
\frac{df}{dx} = \frac{dg}{dh} \frac{dh}{dx}
\end{equation}&lt;/p&gt;

&lt;p&gt;Thus for:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:35}
f(p,\epsilon) = \epsilon \lambda(h(p)) \quad h(p) = 1-\rho(1-p)
\end{equation}&lt;/p&gt;

&lt;p&gt;the derivative with respect to \(p\) is :&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:36}
\frac{df(p,\epsilon)}{dp} = \frac{d\lambda}{dh} \frac{dh}{dp}
\end{equation}&lt;/p&gt;

&lt;p&gt;Evaluating this derivative at \(p = 0\) we have that&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:37}
h(p=0) = 1-\rho(1) =0
\end{equation}&lt;/p&gt;

&lt;p&gt;and so&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:38}
\frac{d\lambda}{dh}\bigg|_{p=0} =  \lambda_{2} + 2\lambda_{3}h + \ldots + (i-1)\lambda_{i}h^{(i-2)} + \ldots \bigg|_{h=0} = \lambda_{2}
\end{equation}&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:39}
\frac{dh}{dp}\bigg|_{p=0} = \frac{d(1-\rho(1-p)}{dp} \bigg|_{(1-p)=1} = \rho^{&amp;lsquo;}(1)
\end{equation}&lt;/p&gt;

&lt;p&gt;So, we get:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:40}
p_{l} \approx \epsilon \lambda_{2}\rho^{&amp;lsquo;}(1)p_{l-1}, \quad p_{l} \to 0
\end{equation}&lt;/p&gt;

&lt;p&gt;For \(p_{l} \to 0\) as \(l\to \infty\), must have \(p_{l} &amp;lt; p_{l-1}
\), and so requires:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:41}
\epsilon \lambda_{2}\rho^{&amp;lsquo;}(1) &amp;lt; 1
\end{equation}&lt;/p&gt;

&lt;p&gt;So \(\lambda_{2}\) is upper bounded by:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:42}
\lambda_{2} &amp;lt;  \frac{1}{\epsilon \rho^{&amp;lsquo;}(1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;We call (\ref{eq:42}) the &lt;em&gt;stability constraint&lt;/em&gt; of density evolution.&lt;/p&gt;

&lt;h2 id=&#34;density-evolution-on-general-memoryless-channels&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; Density evolution on general memoryless channels&lt;/h2&gt;

&lt;p&gt;On general memoryless channels, the B2C messages are the LLRs during
the MPA. We define LLR as&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:19}
L(x) = \log \big( \frac{p(x=0)}{p(x=1)} \big)
\end{equation}&lt;/p&gt;

&lt;p&gt;So the sign of \(L(x)\) determine it is \(0\) or \(1\) and the
magnatue of \(|L(x)|\) tell us how sure we are about the decision.&lt;/p&gt;

&lt;p&gt;Figure &lt;a href=&#34;#org23fcb38&#34;&gt;1&lt;/a&gt; shows a gaussian PDF for
\(\mathcal{p}( r)\) and the probability that the bit is &amp;ldquo;1&amp;rdquo; is the area
of the shade.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org23fcb38&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/telecommunication/20180205gaussian.png&#34; alt=&#34;a Gaussian PDF&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        a Gaussian PDF
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The LLR are real numbers, so it can be illustrated using a probability
density function. We define the PDF for a B2C message at iteration as
\(p(M_{l})\) and C2B \(p(E_{l})\). Also, \(p( r)\) as the PDF for the
LLR of the received signal corrupted by the channel. Also, we suppose
that the message along the edges are I.I.D (This constraint can can
be removed when it comes to MET-LDPC).&lt;/p&gt;

&lt;p&gt;The output of a bit node is the sum of incoming LLRs on the other
edges into that node:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:20}
M_{j,i} = \sum_{j^{&amp;lsquo;}\in A_{i},j^{&amp;lsquo;}\neq j} E_{j^{&amp;lsquo;},i} + r_{i}
\end{equation}&lt;/p&gt;

&lt;p&gt;The probability textbook told us that the PDF of summation of I.I.D random
variables is the convolution of the PDF of these random variables. So the PDF of
the B2C message can be expressed as:&lt;/p&gt;

&lt;p&gt;\begin{equation}
p_{M} = p( r) \otimes p(E_{l})^{\otimes(w_{c}-1)}
\end{equation}&lt;/p&gt;

&lt;p&gt;Considering the irregular LDPC codes and the bit degree distribution
\(\lambda(x)\):&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:21}
p(M_{l}) = p( r) \otimes\sum_{i}\lambda_{i} p(E_{l})^{\otimes(i-1)} = p( r)\otimes \lambda^{\otimes}(p(E_{l}))
\end{equation}&lt;/p&gt;

&lt;p&gt;Now, there are many efficient ways to evaluate the convolution.&lt;/p&gt;

&lt;p&gt;For belief propagation, the function to be evaluated at each check node is show
as below:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:22}
E_{j,i} = \log \big(  \frac{ 1+ \prod_{i^{&amp;lsquo;}\in B_{j,i^{&amp;lsquo;} \neq i} } tanh (M_{j,i^{&amp;lsquo;}}/2)}{ 1- \prod_{i^{&amp;lsquo;}\in B_{j,i^{&amp;lsquo;} \neq i} } tanh (M_{j,i^{&amp;lsquo;}}/2)} \big)
\end{equation}&lt;/p&gt;

&lt;p&gt;So, to get the PDF of two messages \(x\) and \(y\), we have to caculate the
function:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:23}
f(x,y) = \log \frac{ 1 + tanh(x/2) tanh(y/2) }{ 1- tanh(x/2)tanh(y/2)} = -\log \frac{ e^{x} + e^{y} }{ 1 + e^{x+y}}
\end{equation}&lt;/p&gt;

&lt;p&gt;One simple way to use the density evolution on general channels is to assume tht
the original codeword was all zeros. So that the probability that the bit is in
error is the probability that the LLR is negative.&lt;/p&gt;

&lt;p&gt;One more thing, although the PDFs at the beginning of iteration is Gaussian, the
result of the convolution of Gaussian PDFs is not Gaussian except in the limit.
However, for the sake of simplicity, we assume that after convolution the PDFs
remain Gaussian. The truth make Gaussian easy to use that we can use mean and
variance to describe Gaussian. So that we can only track the mean and variance
of the PDFs during the iteration.&lt;/p&gt;

&lt;h3 id=&#34;get-an-excellent-degree-distribution&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; get an excellent degree distribution&lt;/h3&gt;

&lt;p&gt;Using density evolution, we can analyze the threshold of an LDPC ensemble.
However, for a code designers, the question more urging is which degree
distribution will produce the best threshold.&lt;/p&gt;

&lt;p&gt;In general, the more irregular, the better. Accroding to work of Sae-Young
Chung, Forney, Richardson and Urbanke, there is only an 0.0045dB gap between
Shannon limit and the irregular LDPC they designed. For that LDPC code, it has a
codewordlength of \(10^{7}\) and degree varying from 2 to 8000.&lt;/p&gt;

&lt;p&gt;Because \(H\) is sparse, a large proportion of degree-2 bit nodes are required
to guarentee the low density. It can be shown that a degree distribution with a
good threshold will contain a few very high degree bit nodes, many degree two
nodes, but no more than allowed for by stability, and some nodes with degree
between these.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; Summary&lt;/h2&gt;

&lt;p&gt;In this post, we analyze density evolution for regular and irregular
LDPC codes based on BEC and memoryless channel. As a tool for
designing and analyzing LDPC matrix, density evolution plays a
foundamental role and helps researchers find many LDPC matrices of
good performance.&lt;/p&gt;

&lt;p&gt;However, the drawback of density evolution includes: 1. assumption of
cycle-free tanner graph, which is hard to be satisfied in reality; 2.
assumption of infinite length of codeword, which is also hard to be
satisfied; 3. extremely high computational complexity, which makes it
hard to use and results in many simplied and effective alternatives
which are out of this post&amp;rsquo;s scope.&lt;/p&gt;

&lt;p&gt;We will meet density evolution again!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blogging with Emacs Org</title>
      <link>https://zcl.space/tools/my-blog-workflow/</link>
      <pubDate>Sun, 28 Jan 2018 18:01:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/my-blog-workflow/</guid>
      <description>

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#writing-with-emacs-org-publish&#34;&gt;Writing with Emacs Org publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-with-hugo&#34;&gt;Writing with Hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#architecture-of-the-site&#34;&gt;architecture of the site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#settings-for-ox-hugo&#34;&gt;Settings for ox-hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#settings-for-each-section-based-on-ox-hugo&#34;&gt;settings for each section based on ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#settings-for-each-article-based-on-ox-hugo&#34;&gt;settings for each article based on ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#settings-for-hugo-themes&#34;&gt;Settings for Hugo themes&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right Now, I use two blog systems to post articles. First, I use the Emacs
built-in Org to record my learning on math, computer and wireless
communication. For me, the built-in publishing system is obsolete (I am not
saying Org is obsolete. My life rely heavily on Org.) because I find the
second one is more interesting and flexible to config. The second one is
Hugo. Naturally, the Hugo support markdown format. However, I want to use
Emacs Org to maintain a tools consistency. Fortunately, there is &lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;, a
project bridging Emacs org and Hugo markdown. Ox-hugo allows you to write
your blog using Emacs Org then publish them in the markdwon format
automatically.&lt;/p&gt;

&lt;h2 id=&#34;writing-with-emacs-org-publish&#34;&gt;Writing with Emacs Org publish&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to build a static website using &lt;a href=&#34;https://orgmode.org/manual/Publishing.html&#34; target=&#34;_blank&#34;&gt;Emacs Org&lt;/a&gt;. &lt;a href=&#34;https://orgmode.org/worg/&#34; target=&#34;_blank&#34;&gt;Worg&lt;/a&gt;, the Org-mode
community, also have comprehensive tutorials about using Org to build your
own static site. To be honest, worg should be every serious Org users&amp;rsquo;
starting point. So many Org experts contribute their summary of Org in
high-quality articles on the Worg.&lt;/p&gt;

&lt;p&gt;In general, through Emacs Org mode, all you need is to set the variable
&lt;code&gt;org-publish-project-alist&lt;/code&gt; . Of course, if you want your site beautiful,
some knowledge about CSS and JavaScript is necessary.&lt;/p&gt;

&lt;h2 id=&#34;writing-with-hugo&#34;&gt;Writing with Hugo&lt;/h2&gt;

&lt;p&gt;Now, I moved from the Emacs built-in publishing system to Hugo because of
Hugo&amp;rsquo;s efficiency and flexibility. You can build your static site in just a
few minutues. One major problem of the built-in publishing system is that
you have to wait for a long time as your site gets larger and larger. When
you have only several posts, there is no problem. However, when you have more
than one hundred posts, you want to kill yourself during waiting the
publishing.&lt;/p&gt;

&lt;p&gt;Using Hugo, everything is easy. Post an article is at the fingure.However,
if you want to write a post, it is prioritized to finished it in the github
format markdown. For a guy who rarely use markdown and is familiar with
Emacs Org, this constraint is not human. Fortunately, &lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34; target=&#34;_blank&#34;&gt;Ox-hugo&lt;/a&gt;, a carefuly
crafted Org exporter backend for Hugo, is definitely worth a try. Ox-hugo
bridge the Emacs Org and Hugo and make the workflow at a fly. Even though,
Hugo supports to write the posts in Org format, Ox-hugo still is a sharp
tool which I will not give up and highly recommend it.&lt;/p&gt;

&lt;p&gt;Especially, there is tons of themes for you. Also, you can set up your own
theme.&lt;/p&gt;

&lt;h3 id=&#34;architecture-of-the-site&#34;&gt;architecture of the site&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;hugo&lt;/code&gt; , there is a default architecture. Using &lt;code&gt;ox-hugo&lt;/code&gt; , I store
the Org file in the subdirectory &lt;code&gt;content-org&lt;/code&gt; . There are several sections
for my static site such &lt;code&gt;math&lt;/code&gt; , &lt;code&gt;computer&lt;/code&gt; and &lt;code&gt;communication&lt;/code&gt; . I store
the articles in the corresponding category. For example I will put an
article on &lt;em&gt;mathematical analysis&lt;/em&gt; in the file named &lt;code&gt;content-org/math.org&lt;/code&gt;
so that after exporting, the markdown file will be put in the subdirectory
&lt;code&gt;content/math/&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgd0a639c&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/tools/20180126HugoArchitecture.png&#34; alt=&#34;architecture of Hugo project&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        architecture of Hugo project
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;settings-for-ox-hugo&#34;&gt;Settings for ox-hugo&lt;/h2&gt;

&lt;h3 id=&#34;settings-for-each-section-based-on-ox-hugo&#34;&gt;settings for each section based on ox-hugo&lt;/h3&gt;

&lt;p&gt;As mentioned before, there are several sections for my site and I use
ox-hugo to handle articles for this sections. In the subdirectory
&lt;code&gt;content-org/&lt;/code&gt; , there are several &lt;code&gt;*.org&lt;/code&gt; files such as &lt;code&gt;math.org&lt;/code&gt; ,
&lt;code&gt;computer.org&lt;/code&gt; , &lt;code&gt;communications.org&lt;/code&gt; and &lt;code&gt;tools.org&lt;/code&gt; . All these &lt;code&gt;.org&lt;/code&gt;
files have multiple level-1 headlines. for each level-1 headline, there is
one article. I use one-post-per-Org-subtree style preferred in the ox-hugo
&lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;document&lt;/a&gt; but one-section-per-Org-file style for each section. The
one-section-per-Org-file style is kind of like one-post-per-Org-file
mentioned in the ox-hugo &lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;document&lt;/a&gt;. So I have a hybrid style.&lt;/p&gt;

&lt;p&gt;For each section, I have to set some parameters properly so that the
articles goes to the right postion. Take &lt;code&gt;math.org&lt;/code&gt; for example, the
beginning of this file is like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: math
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+FILETAGS: math
#+OPTIONS:   *:t &amp;lt;:nil timestamp:nil toc:t
#+HUGO_AUTO_SET_LASTMOD: t
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;the first line tells &lt;code&gt;ox-hugo&lt;/code&gt; the targeting directory is &lt;code&gt;../content/&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;the second line tells &lt;code&gt;ox-hugo&lt;/code&gt; the article goes to &lt;code&gt;../content/math&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;the third line is the Org state of the article, &lt;code&gt;TODO&lt;/code&gt; will render the
article a draft while &lt;code&gt;DONE&lt;/code&gt; a finished post.&lt;/li&gt;
&lt;li&gt;the fourth line will tell the Org all the headlines of this file has the
tag &lt;code&gt;math&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;at the fifth line. &lt;code&gt;*:t&lt;/code&gt; will toggle emphasized text. &lt;code&gt;&amp;lt;:nil&lt;/code&gt; means the
timestamp will not be exported. &lt;code&gt;timestamp:nil&lt;/code&gt; means the creation time
will not be exported. &lt;code&gt;toc:t&lt;/code&gt; means for the articles table of content is
generated. More settings like these will be detailed in the &lt;code&gt;Org&lt;/code&gt;
manual. (You can open the Org manual by &lt;code&gt;C-h i&lt;/code&gt; ,then seclect the Org
section.) On table of contents, ox-hugo has an &lt;a href=&#34;https://ox-hugo.scripter.co/doc/org-toc&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the sixth line tells ox-hugo to export the latest time when the article
is modified.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;settings-for-each-article-based-on-ox-hugo&#34;&gt;settings for each article based on ox-hugo&lt;/h3&gt;

&lt;p&gt;I use the &lt;code&gt;org-capture&lt;/code&gt; to start a article. The emacs-lisp:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39;(
        (&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;h&amp;quot; &amp;quot;Hugo post&amp;quot;)
        (&amp;quot;hm&amp;quot; &amp;quot;Math&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; &amp;quot;Math&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         &amp;quot;:math:&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;hc&amp;quot; &amp;quot;Computer&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; &amp;quot;Computer&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ht&amp;quot; &amp;quot;Telecommunication&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; &amp;quot;Telecommunication&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;Life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ho&amp;quot; &amp;quot;Tools&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; &amp;quot;Tools&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above code, you can see that I rely heavily on ox-hugo. there is one
function named &lt;code&gt;org-hugo-new-subtree-post-capture-template&lt;/code&gt; which is shown
as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (defun org-hugo-new-subtree-post-capture-template ()
    &amp;quot;Returns `org-capture&#39; template string for new Hugo post.
See `org-capture-templates&#39; for more information.&amp;quot;
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
           (title (read-from-minibuffer &amp;quot;Post Title: &amp;quot;)) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #&#39;identity
                 `(
                   ,(concat &amp;quot;* TODO &amp;quot; title)
                   &amp;quot;:PROPERTIES:&amp;quot;
                   ,(concat &amp;quot;:EXPORT_FILE_NAME: &amp;quot; fname)
                   ,(concat &amp;quot;:EXPORT_DATE: &amp;quot; date) ;Enter current date and time
                   ,(concat &amp;quot;:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: &amp;quot;  &amp;quot;:summary \&amp;quot;summary\&amp;quot;&amp;quot;)
                   &amp;quot;:END:&amp;quot;
                   &amp;quot;%?\n&amp;quot;)          ;Place the cursor here finally
                 &amp;quot;\n&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One more point, it is awesome to preview each article after saveing it.
Yes! you can do it according &lt;a href=&#34;https://ox-hugo.scripter.co/doc/auto-export-on-saving&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;settings-for-hugo-themes&#34;&gt;Settings for Hugo themes&lt;/h2&gt;

&lt;p&gt;Now, there are more than 190+ &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;themes&lt;/a&gt; for Hugo. It is pretty straightforward
to &lt;a href=&#34;https://gohugo.io/themes/&#34; target=&#34;_blank&#34;&gt;install and config&lt;/a&gt; a theme as you wish. I prefer the &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic theme&lt;/a&gt; which I
adopt for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is easy manage my post according to different categories.&lt;/li&gt;
&lt;li&gt;I love the widget most.&lt;/li&gt;
&lt;li&gt;support of \(\mathrm{\LaTeX}\) so I can with the mathematical expressions
fluently.&lt;/li&gt;
&lt;li&gt;Responsive and mobile friendly.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;easy to update.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34; target=&#34;_blank&#34;&gt;several ways&lt;/a&gt; to install the Academic theme. I use the Academic
Kickstart way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The very reason I use the Kickstart way lies in the updatation of Academic.
In the Kickstart way, Academic is installed as a Git sub-module.&lt;/p&gt;

&lt;p&gt;If you want to update the theme,all you have to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --remote --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, for different methods of updating the theme, you can check &lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://zcl.space/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://zcl.space/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>https://zcl.space/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://zcl.space/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://zcl.space/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://zcl.space/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>https://zcl.space/publication/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zcl.space/publication/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>https://zcl.space/publication/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zcl.space/publication/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
