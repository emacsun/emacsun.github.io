<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZCL.SPACE on ZCL.SPACE</title>
    <link>https://zcl.space/</link>
    <description>Recent content in ZCL.SPACE on ZCL.SPACE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 ZCL</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>copy and deep copy in python</title>
      <link>https://zcl.space/computer/copy-and-deep-copy-in-python/</link>
      <pubDate>Fri, 01 Jun 2018 21:16:00 +0800</pubDate>
      
      <guid>https://zcl.space/computer/copy-and-deep-copy-in-python/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#no-copy-at-all&#34;&gt;No Copy at All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#view-or-shallow-copy&#34;&gt;view or Shallow Copy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#deep-copy&#34;&gt;Deep Copy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#only-happened-in-array&#34;&gt;only happened in array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://docs.scipy.org/doc/numpy/user/quickstart.html&#34; target=&#34;_blank&#34;&gt;tutorial of Numpy&lt;/a&gt;, there a section called &lt;em&gt;Copies and Views&lt;/em&gt;, as a newbie
of Python, I was shocked. In particular, some priori information of Matlab
aggravate the feeling even more. Let&amp;rsquo;s take a look at what happened in Python
when I want to copy the value of one variable to another one.&lt;/p&gt;

&lt;h2 id=&#34;no-copy-at-all&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; No Copy at All&lt;/h2&gt;

&lt;p&gt;Naturally, when I execute &lt;code&gt;b=a&lt;/code&gt; in any language. &lt;code&gt;b&lt;/code&gt; is expected to have the
value of &lt;code&gt;a&lt;/code&gt; , and if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both array of &lt;code&gt;int&lt;/code&gt; , then after &lt;code&gt;b=a&lt;/code&gt; ,
I execute &lt;code&gt;b[1]=b[1]+1&lt;/code&gt; will make &lt;code&gt;b[1]&lt;/code&gt; greater than &lt;code&gt;a[1]&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;. However,
this is not the case in Python.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;import numpy as np
a = np.arange(12)
b = a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The statement of &lt;code&gt;b is a&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; which means that &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are
two names for the same array object. &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; behave like the pointer in C.
if you execute &lt;code&gt;b[1] = 555&lt;/code&gt; ,then &lt;code&gt;a[1]&lt;/code&gt; will be &lt;code&gt;555&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Also, if you use the &lt;code&gt;id()&lt;/code&gt; function, &lt;code&gt;id(a)&lt;/code&gt; and &lt;code&gt;id(b)&lt;/code&gt; will return the same
value. The &lt;code&gt;id()&lt;/code&gt; function return the unique identifier of an object. If two
objects have the same identifier, the two objects are actually one object.&lt;/p&gt;

&lt;h2 id=&#34;view-or-shallow-copy&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; view or Shallow Copy&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;view&lt;/code&gt; is a good word for what shallow copy mean. For a large value, if you
want to change part of it, you view the part you want to change.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;import numpy as np
a = np.random.random((3,5))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you just want to change the second and the third column of &lt;code&gt;a&lt;/code&gt;, you view the
part you want change by slicing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;p = a[:,1:3]
p[:] = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the second and third column will be all &lt;code&gt;10&lt;/code&gt; . &lt;code&gt;view&lt;/code&gt; behaves like the
microscope. Only the part of viewed will be shared by the two objects.&lt;/p&gt;

&lt;h2 id=&#34;deep-copy&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Deep Copy&lt;/h2&gt;

&lt;p&gt;What? deep copy? Yes, it&amp;rsquo;s deep copy that implement the real copy as we
expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;b = a.copy()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;b&lt;/code&gt; is a complete copy of &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; will not share the same
object id. This is what the copy we want.&lt;/p&gt;

&lt;p&gt;For example, if you have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;import numpy as np
a = np.arange(4)
b = a.copy()
b[0] = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will have &lt;code&gt;b&lt;/code&gt; equals &lt;code&gt;[4,1,2,3]&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; equals &lt;code&gt;[0,1,2,3]&lt;/code&gt; . Now &lt;code&gt;b&lt;/code&gt;
and &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;only-happened-in-array&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; only happened in array&lt;/h2&gt;

&lt;p&gt;Fortunately, the three version copy just happened on array type. when &lt;code&gt;b&lt;/code&gt;
and &lt;code&gt;a&lt;/code&gt; are just integers or float numbers, &lt;code&gt;=&lt;/code&gt;  will implement the real
copy.&lt;/p&gt;

&lt;p&gt;For example, when you have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;a = 2
b = a
b += 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you get &lt;code&gt;b=4&lt;/code&gt; and &lt;code&gt;a=2&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>learn python the hard way</title>
      <link>https://zcl.space/computer/learn-python-the-hard-way/</link>
      <pubDate>Sun, 27 May 2018 20:43:00 +0800</pubDate>
      
      <guid>https://zcl.space/computer/learn-python-the-hard-way/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#a-small-surprise-in-ex4-dot-py&#34;&gt;a small surprise in ex4.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#imcompatiblility-between-python-3-dot-5-and-3-dot-6&#34;&gt;imcompatiblility  between python 3.5 and 3.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#default-end-is-enter&#34;&gt;default end is enter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#the-multiline-string&#34;&gt;the multiline string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#help-in-ipython&#34;&gt;help in Ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; &lt;a href=&#34;#call-a-script-with-more-inputs&#34;&gt;call a script with more inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; &lt;a href=&#34;#open-a-file&#34;&gt;open a file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;8&lt;/span&gt; &lt;a href=&#34;#call-function-recursively&#34;&gt;call function recursively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;9&lt;/span&gt; &lt;a href=&#34;#the-input-of-a-function&#34;&gt;the input of a function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;10&lt;/span&gt; &lt;a href=&#34;#variable-in-the-for-loop&#34;&gt;variable in the for loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;11&lt;/span&gt; &lt;a href=&#34;#the-range-function&#34;&gt;the &lt;code&gt;range&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;12&lt;/span&gt; &lt;a href=&#34;#variable-in-the-for-loop-and-range&#34;&gt;variable in the for loop and range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;13&lt;/span&gt; &lt;a href=&#34;#a-project-skeleton&#34;&gt;a project skeleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;For a long time, I have been planning to learn Python. However, because I never
use Python in my work, the plan was delayed again and again. Today, it is
raining cats and dogs outside. Why not do something I have planned long time ago
in this perfect mode? So I picked up the book &lt;em&gt;Learning Python the Hard Way&lt;/em&gt; by
Zed Shaw. During the learning, I use Emacs as my Editor, running the programming
on my old Thinkpad with Ubuntu 16.04 and Python3.5. I am going to learn Python
in the hard way. However, I believe it will be the clever and efficient way.&lt;/p&gt;

&lt;h2 id=&#34;a-small-surprise-in-ex4-dot-py&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; a small surprise in ex4.py&lt;/h2&gt;

&lt;p&gt;Everything goes fine until I am doing exercise 4. The python code is:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
space_in_a_car &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
drivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
passengers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
cars_not_driven &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cars &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; drivers
cars_driven &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drivers
carpool_capacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cars_driven &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; space_in_a_car
average_passengers_per_car &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; passengers &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; cars_driven

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are&amp;#34;&lt;/span&gt;,cars,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cars available.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are only&amp;#34;&lt;/span&gt;,drivers,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drivers avaiable.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There will be&amp;#34;&lt;/span&gt;, cars_not_driven,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty cars today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We can transport&amp;#34;&lt;/span&gt;,carpool_capacity,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;people today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We have&amp;#34;&lt;/span&gt;,passengers,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to carpool today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We need to put ablout&amp;#34;&lt;/span&gt;,average_passengers_per_car,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in each car&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;There are 100 cars available.
There are only 30 drivers avaiable.
There will be 70 empty cars today.
We can transport 120 people today.
We have 90 to carpool today.
We need to put ablout 3.0 in each car
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the result is shown belowing the code.&lt;/p&gt;

&lt;p&gt;Notice that in the source, the first line concerning print is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;There are&amp;quot;,cars,&amp;quot;cars available.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;There are &amp;quot;,cars,&amp;quot; cars available.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the difference? the whitespace. In Python, the whitespace is inserted
around the results automatically which is kind of a surprise for a programmer
familiar with &lt;code&gt;C/C++&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;imcompatiblility-between-python-3-dot-5-and-3-dot-6&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; imcompatiblility  between python 3.5 and 3.6&lt;/h2&gt;

&lt;p&gt;I have python3.5 installed on my Ubuntu 16.04 hoping it will help me go through
the book &lt;em&gt;Learning Python the Hard Way&lt;/em&gt; . However, when it comes to ex5.py, the
dream is waken up.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;my_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zed A. Shaw&amp;#39;&lt;/span&gt;
my_age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;
my_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;
my_weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;
my_eyes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Blue&amp;#39;&lt;/span&gt;
my_teeth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;White&amp;#39;&lt;/span&gt;
my_hair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Brown&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s talk about {my_name}.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;He&amp;#39;s {my_height} inches tall.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;He&amp;#39;s {my_weight} pounds heavy.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Actually that&amp;#39;s not too heavy.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;He&amp;#39;s got {my_eyes} eyes and {my_hair} hair.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;His teeth are usually {my_teeth} depending on the coffee.&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# this line is tricky, try to get it exact right&lt;/span&gt;
total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_age &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; my_height &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; my_weight
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;If I add {my_age}, {my_height}, and {my_weight} I get {total}.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When I execute &lt;code&gt;python3.5 ex5.py&lt;/code&gt; in terminal. SyntaxError is triggered and it
says:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;  File &amp;quot;ex5.py&amp;quot;, line 9
    print(f&amp;quot;Let&#39;s talk about {my_name}.&amp;quot;)
                                       ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After carefully comparison with the code in the book, I found no mistakes. So
maybe it is the interpreter that raise the error. So python 3.6 is installed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo add-apt-repository ppa:jonathonf/python-3.6
sudo apt-get update
sudo apt-get install python3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I execute &lt;code&gt;python3.6 ex5.py&lt;/code&gt;, hooray, it works with output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Let&#39;s talk about Zed A. Shaw.
He&#39;s 74 inches tall.
He&#39;s 180 pounds heavy.
Actually that&#39;s not too heavy.
He&#39;s got Blue eyes and Brown hair.
His teeth are usually White depending on the coffee.
If I add 35, 74, and 180 I get 289.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I began to worry python for its incompatibility even after python3.
Even this little &lt;code&gt;print&lt;/code&gt; function shows difference, what about other features?&lt;/p&gt;

&lt;h2 id=&#34;default-end-is-enter&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; default end is enter&lt;/h2&gt;

&lt;p&gt;In ex7.py&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Mary had a little lamb.&amp;quot;)
print(&amp;quot;Its fleece was white as {}.&amp;quot;.format(&#39;snow&#39;))
print(&amp;quot;And everywhere that Mary went.&amp;quot;)
print(&amp;quot;.&amp;quot;*10)

end1 = &amp;quot;C&amp;quot;
end2 = &amp;quot;h&amp;quot;
end3 = &amp;quot;e&amp;quot;
end4 = &amp;quot;e&amp;quot;
end5 = &amp;quot;s&amp;quot;
end6 = &amp;quot;e&amp;quot;
end7 = &amp;quot;B&amp;quot;
end8 = &amp;quot;u&amp;quot;
end9 = &amp;quot;r&amp;quot;
end10 = &amp;quot;g&amp;quot;
end11 = &amp;quot;e&amp;quot;
end12 = &amp;quot;r&amp;quot;
# watch end = &#39;&#39; at the end. try removing it to see what happens
print(end1 + end2 + end3 + end4 + end5 + end6 , end=&#39; &#39;)
print(end7 + end8 + end9 + end10 + end11 + end12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Mary had a little lamb.
Its fleece was white as snow.
And everywhere that Mary went.
..........
Cheese Burger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(end1 + end2 + end3 + end4 + end5 + end6 , end=&#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line change the default &lt;code&gt;end&lt;/code&gt; as whitespace. By default, the &lt;code&gt;end&lt;/code&gt; will be
&lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-multiline-string&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; the multiline string&lt;/h2&gt;

&lt;p&gt;There are two ways to generate multiline string. first is using the escape
sequence; second is to use three double-quotes pair. Today, I found that three
single-quotes pair is also ok. see the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fat_cat =&#39;&#39;&#39;
I&#39;ll do a list:
\t* Cat food
\t* Fishies
\t* Catnip\n\t* Grass
&#39;&#39;&#39;

thin_mouse =&#39;&#39;&#39;
I&#39;ll do another list:
\t* mouse food
\t* Rice
\t* Catnip\n\t* Grass
&#39;&#39;&#39;
print(fat_cat)
print(thin_mouse)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;also don&amp;rsquo;t foget that the string can be format by prefix a &lt;code&gt;f&lt;/code&gt; to be a f-string.&lt;/p&gt;

&lt;h2 id=&#34;help-in-ipython&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; help in Ipython&lt;/h2&gt;

&lt;p&gt;I like Ipython because of its REPL style. To get help of a function just follow
the function with a ? or ??, then hit the return.&lt;/p&gt;

&lt;p&gt;For example, I want to read the help for the builtin function &lt;code&gt;input&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;In [1]: input?
Type:        builtin_function_or_method
String form: &amp;lt;built-in function input&amp;gt;
Namespace:   Python builtin
Definition:  input(prompt)
Docstring:
Read a string from standard input.  The trailing newline is stripped.

The prompt string, if given, is printed to standard output without a
trailing newline before reading input.

If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.
On *nix systems, readline is used if available.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe, ? and ?? will be the most frequenct symbol I use during using python.&lt;/p&gt;

&lt;h2 id=&#34;call-a-script-with-more-inputs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; call a script with more inputs&lt;/h2&gt;

&lt;p&gt;You can call a script with more inputs using the &lt;code&gt;argv&lt;/code&gt; module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sys import argv
# read the WYSS section for how to run this
script, first, second ,third = argv

print(&amp;quot;The script is called:&amp;quot;,script)
print(&amp;quot;Your first variable is:&amp;quot;,first)
print(&amp;quot;Your second variable is:&amp;quot;,second)
print(&amp;quot;Your third variable is:&amp;quot;,third)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when save the above code as ex13.py, then call it from the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;python3.6 ex13.py 1st 2nd 3rd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the &lt;code&gt;argv&lt;/code&gt; will contains the &lt;code&gt;ex13.py&lt;/code&gt; &lt;code&gt;1st&lt;/code&gt; &lt;code&gt;2nd&lt;/code&gt; &lt;code&gt;3rd&lt;/code&gt; . The first line
of the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;script, first, second, third = argv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unpack the &lt;code&gt;argv&lt;/code&gt; . Then, &lt;code&gt;script =&#39;ex13.py&#39;&lt;/code&gt;  &lt;code&gt;first = &#39;1st&#39;&lt;/code&gt;  &lt;code&gt;second = &#39;2nd&#39;&lt;/code&gt;
and so on.&lt;/p&gt;

&lt;p&gt;Another way allowing the user to input is using the function &lt;code&gt;input&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;open-a-file&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; open a file&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = open(filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;txt&lt;/code&gt; is not the contents of the file. It is a file object. By this object,
you can move around and read the file. Actually, we can open the file twice and
use two different file objects pointing to the same file.&lt;/p&gt;

&lt;p&gt;A file opject also has the following function:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgd804b12&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  functions that a file object can call
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;close&lt;/td&gt;
&lt;td&gt;close the file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;read the contents of the file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;readline&lt;/td&gt;
&lt;td&gt;reads just one line of a text file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;truncate&lt;/td&gt;
&lt;td&gt;empties the file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;write(&amp;lsquo;stuff&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;writes &amp;ldquo;stuff&amp;rdquo; into the file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;seek(0)&lt;/td&gt;
&lt;td&gt;move the read/write location to the beginning of the file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;By default, the file is opened for reading. If you want to open a file and
writing something into it, use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = open(filename,&#39;w&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to open a file, read the contents, then write something into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = open(filename,&#39;r+&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually, there is another option for reading and writing &lt;code&gt;w+&lt;/code&gt;, and the
difference is :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;r+&lt;/code&gt; Open for reading and writing.  The stream is positioned at the beginning
of the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w+&lt;/code&gt; Open for reading and writing.  The file is created if it does not exist,
otherwise it is truncated.  The stream is positioned at the beginning of the
file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that the &lt;code&gt;w+&lt;/code&gt; option will truncate the file if it exists. Also, the &lt;code&gt;w&lt;/code&gt;
option will truncate the file if exists. So the &lt;code&gt;target.truncate()&lt;/code&gt; is not
necessary if you open a file with &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;w+&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;close&lt;/code&gt; your file, you will find that most of the time it is ok not close it
because Cpython will do it for you. However, when you forget to close the file,
the contents aimed to be written into the file is actually stored in a buffer.
until you close the file, the contents will not be saved to the file.&lt;/p&gt;

&lt;h2 id=&#34;call-function-recursively&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;8&lt;/span&gt; call function recursively&lt;/h2&gt;

&lt;p&gt;Look at the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this one is like your scripts with argv
def print_two(*args):
    arg1,arg2,arg3 = args
    print(f&amp;quot;arg1: {arg1},arg2: {arg2}, arg3: {arg3}&amp;quot;)
    print_none()
# ok, that *args is actually pointless, we can just do this
def print_two_again(arg1,arg2):
    print(f&amp;quot;arg1: {arg1},arg2: {arg2}&amp;quot;)

# this just takes one argument
def print_one(arg1):
    print(f&amp;quot;arg1: {arg1}&amp;quot;)

# this one takes no arguments
def print_none():
    print(&amp;quot;I got nothin&#39;.&amp;quot;)
    print_two(&amp;quot;Zhang&amp;quot;,&amp;quot;Chao&amp;quot;,&amp;quot;long&amp;quot;)

print_two_again(&amp;quot;Zed&amp;quot;,&amp;quot;Shaw&amp;quot;)
print_one(&amp;quot;First!&amp;quot;)
print_none()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that &lt;code&gt;print_two&lt;/code&gt; calls &lt;code&gt;print_none&lt;/code&gt; and vice versa. This will raise the
RecursionError :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;RecursionError: maximum recursion depth exceeded while calling a Python object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am just curious what will happen if I let two functions call each other
recursively. :)&lt;/p&gt;

&lt;h2 id=&#34;the-input-of-a-function&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;9&lt;/span&gt; the input of a function&lt;/h2&gt;

&lt;p&gt;Input to a function is just like &lt;code&gt;argv&lt;/code&gt; to a script. I found that duirng the
input of a function can also be a function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;input the argument:&amp;quot;)
cheese_and_crackers(input(&amp;quot;arg1:&amp;quot;),input(&amp;quot;arg2:&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Drill more on the &lt;code&gt;input(&amp;quot;arg1:&amp;quot;)&lt;/code&gt; , I found that the return of &lt;code&gt;input(&amp;quot;arg1:&amp;quot;)&lt;/code&gt;
is a str, so there must be an automatic convert from str to int for the
&lt;code&gt;cheese_and_crackers&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cheese_and_crackers(input(&amp;quot;arg1:&amp;quot;)+10,input(&amp;quot;arg2:&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will raise a TypeError. So:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cheese_and_crackers(int(input(&amp;quot;arg1:&amp;quot;))+10,input(&amp;quot;arg2:&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will work as I wish. Furthermore, maybe the &lt;code&gt;int&lt;/code&gt; should be &lt;code&gt;float&lt;/code&gt; to accept
float number.&lt;/p&gt;

&lt;h2 id=&#34;variable-in-the-for-loop&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;10&lt;/span&gt; variable in the for loop&lt;/h2&gt;

&lt;p&gt;In a &lt;code&gt;for&lt;/code&gt; loop, python can use a variable that isn&amp;rsquo;t defined yet. This is because
that the &lt;code&gt;for&lt;/code&gt; loop defines the variable and initialize it to the current
element of the loop iteration each time through.&lt;/p&gt;

&lt;p&gt;Now, we give an example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we can also build lists, first start with an empty one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# you have to define this variable before you use it.&lt;/span&gt;
elements &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# then use the range function to do 0 to 5 counts&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# you don&amp;#39;t have to define i before you use it.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Adding {i} to the list.&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# append is a function that lists understand&lt;/span&gt;
    elements&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)


i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i is {i}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# now we can print them out too&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elements:
    &lt;span style=&#34;color:#75715e&#34;&gt;#even you define i = 6, i will be overwritten in the for statement&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Element was: {i}&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i is {i}&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At first, we define an empty list &lt;code&gt;elements&lt;/code&gt; , then we fill the list with
&lt;code&gt;range(3,100,16)&lt;/code&gt; . After that we print the elements of the list. Notice that
even we define a variable &lt;code&gt;i=20&lt;/code&gt; , the statement &lt;code&gt;for i in elements:&lt;/code&gt; will
define a new variable &lt;code&gt;i&lt;/code&gt; and overwrite the value of &lt;code&gt;20&lt;/code&gt; . The value of the new
&lt;code&gt;i&lt;/code&gt; is the value of the first element of the list. After each loop, the &lt;code&gt;i&lt;/code&gt;
steps through the list.&lt;/p&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Adding 4 to the list.
Adding 20 to the list.
Adding 36 to the list.
Adding 52 to the list.
Adding 68 to the list.
Adding 84 to the list.
i is 20
Element was: 4
Element was: 20
Element was: 36
Element was: 52
Element was: 68
Element was: 84
i is 84
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that before the &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;i=20&lt;/code&gt; . Once the &lt;code&gt;for&lt;/code&gt; loop begins, &lt;code&gt;i&lt;/code&gt;
will be recreated and be asigned value &lt;code&gt;4&lt;/code&gt; which is the first element of the
list. After the &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;i=84&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;the-range-function&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;11&lt;/span&gt; the &lt;code&gt;range&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;In ex32, there appears a builtin function &lt;code&gt;range&lt;/code&gt;. &lt;code&gt;range&lt;/code&gt; is used to generate a
sequence of integers, and its help doc is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Type:            type
String form:     &amp;lt;class &#39;range&#39;&amp;gt;
Namespace:       Python builtin
Init definition: range(self, *args, **kwargs)
Docstring:
range(stop) -&amp;gt; range object
range(start, stop[, step]) -&amp;gt; range object

Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;range(start,stop,step)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate the sequence of integers including the &lt;code&gt;start&lt;/code&gt; and excluding the
&lt;code&gt;stop&lt;/code&gt; . This is different from Matlab, in which &lt;code&gt;start:step:stop&lt;/code&gt; will include
both the &lt;code&gt;start&lt;/code&gt; and the &lt;code&gt;stop&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;variable-in-the-for-loop-and-range&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;12&lt;/span&gt; variable in the for loop and range&lt;/h2&gt;

&lt;p&gt;Check the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loopnumber&lt;/span&gt;(variable,step):
    numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i,variable,step):
        numbers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; numbers

variable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
step     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The numbers: &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; loopnumber(variable,step):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(num)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;i&lt;/code&gt; in the line 4, the first &lt;code&gt;i&lt;/code&gt; will be created at the start of the
loop while the second &lt;code&gt;i&lt;/code&gt; will take the value from line 3. So the contents of
&lt;code&gt;numbers&lt;/code&gt; will be &lt;code&gt;[2,4,6,8]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-project-skeleton&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;13&lt;/span&gt; a project skeleton&lt;/h2&gt;

&lt;p&gt;Because of the issue of python multi-version, it will be safe to
start your project with &lt;code&gt;virtualenv&lt;/code&gt; . Using &lt;code&gt;virtualenv&lt;/code&gt; , your python
environment is safe even if you install multiple python on your computer.
This section will help you create a skeleton directory which you can use to
start a new project up easily. The skeleton directory will have your project
layout, automated tests, modules, and install scripts. When a new project is to
be created, you just copy this directory ,rename it and everything is ready for
you to start coding.&lt;/p&gt;

&lt;p&gt;As mentioned before, &lt;code&gt;virtualenv&lt;/code&gt; will be needed. so install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sudo pip3 install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, the pip will crash. If you want to reinstall your pip, goto the
&lt;a href=&#34;https://pypi.org/project/pip/#files&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt; , download and extract the source, then install it using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sudo python3 setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During my installation of &lt;code&gt;virtualenv&lt;/code&gt;, there is an error &lt;code&gt;Missing dependencies
for SOCKS support&lt;/code&gt; . You need the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;unset all_proxy
unset ALL_PROXY
pip install pysocks
source .bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;pip&lt;/code&gt; works again with socks proxy. want more please check &lt;a href=&#34;https://stackoverflow.com/questions/40926018/pip-install-doesnt-work-invalidschema-missing-dependencies-for-socks-support/43135798&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;virtualenv&lt;/code&gt; is ready, then you can create a python installation, which is
handy to manage versions of your package for different projects. The following
commands will create the virtual environment.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir ~/.venvs
virtualenv ~/.venvs/lpthw
. ~/.venvs/lpthw/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;then you will find the shell symbol changing from &lt;code&gt;$&lt;/code&gt; to &lt;code&gt;(lpthw) $&lt;/code&gt; . After
that you will find there is a &lt;code&gt;python&lt;/code&gt; under &lt;code&gt;/lpthw/bin&lt;/code&gt; . The final step is to
install &lt;code&gt;nose&lt;/code&gt; , which is a testing framework we&amp;rsquo;ll use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip install nose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;nose&lt;/code&gt; will appear at directory &lt;code&gt;~/.venvs/lpthw/bin&lt;/code&gt; . This let
you install different versions of python packages for different projects without
infecting the main system environment.&lt;/p&gt;

&lt;p&gt;Note that when in shell you should have &lt;code&gt;(lpthw)&lt;/code&gt; at the very beginning of the
line with &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;. ~/.venvs/lpthw/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will tell the shell that the virtual environment use python installed at
&lt;code&gt;~/.venvs/lpthw/bin/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This project skeleton is useful when you want to create a module based on
certain vertion of python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>write and evaluate python in Emacs and maybe Org mode</title>
      <link>https://zcl.space/tools/write-and-evaluate-python-code-in-org-mode/</link>
      <pubDate>Sun, 13 May 2018 11:22:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/write-and-evaluate-python-code-in-org-mode/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#edit-the-source-code-in-python-mode&#34;&gt;edit the source code in python mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#set-the-command-for-evaluating-the-python-code&#34;&gt;set the command for evaluating the python code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#delete-the-dot-elc-files&#34;&gt;delete the *.elc files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#export-with-the-result&#34;&gt;export with the result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#change-the-systematic&#34;&gt;change the systematic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; &lt;a href=&#34;#install-the-distutils-packages&#34;&gt;install the distutils packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; &lt;a href=&#34;#debug-python-in-emacs&#34;&gt;debug python in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;I write this post during reading the book &lt;em&gt;Learn Python3 the Hard Way&lt;/em&gt;. This is
the first python book I read from page to page.&lt;/p&gt;

&lt;h2 id=&#34;edit-the-source-code-in-python-mode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; edit the source code in python mode&lt;/h2&gt;

&lt;p&gt;In Emacs Org mode, you can insert the source code using &lt;code&gt;&amp;lt;s&lt;/code&gt; then &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; . If
you want to edit the source code, you can hit &lt;code&gt;C-c &#39;&lt;/code&gt; then you will be switched
to a buffer in python mode and all the features of python mode can be
utilitized. After finishing the modification, &lt;code&gt;, c&lt;/code&gt; will save the changes and
switch you back to the Org file and &lt;code&gt;, k&lt;/code&gt; will give up the changes and switch
you back to the Org file.&lt;/p&gt;

&lt;h2 id=&#34;set-the-command-for-evaluating-the-python-code&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; set the command for evaluating the python code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-babel-python-command &amp;quot;python3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;delete-the-dot-elc-files&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; delete the *.elc files&lt;/h2&gt;

&lt;p&gt;After org mode version 9, it is buggy to evaluate python code in Org mode and
the error message is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Evaluation of this python code is disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some google, I find the solution at &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/issues/7641&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; . The solution is easy: deleting
the .elc files under the .emacs.d/elpa/org-plus-contrib-XXXXXX/ directory.&lt;/p&gt;

&lt;h2 id=&#34;export-with-the-result&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; export with the result&lt;/h2&gt;

&lt;p&gt;Take the following code snippet for example.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
space_in_a_car &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
drivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
passengers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
cars_not_driven &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cars &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; drivers
cars_driven &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drivers
carpool_capacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cars_driven &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; space_in_a_car
average_passengers_per_car &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; passengers &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; cars_driven

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are&amp;#34;&lt;/span&gt;,cars,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cars available.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are only&amp;#34;&lt;/span&gt;,drivers,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drivers avaiable.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There will be&amp;#34;&lt;/span&gt;, cars_not_driven,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty cars today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We can transport&amp;#34;&lt;/span&gt;,carpool_capacity,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;people today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We have&amp;#34;&lt;/span&gt;,passengers,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to carpool today.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We need to put ablout&amp;#34;&lt;/span&gt;,average_passengers_per_car,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in each car&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After the above debugging and config, you can evalute the code snippet using
&lt;code&gt;C-c C-c&lt;/code&gt; inside the code. and after that the result will appear below the code
as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#+RESULTS:
: There are 100 cars available.
: There are only 30 drivers avaiable.
: There will be 70 empty cars today.
: We can transport 120 people today.
: We have 90 to carpool today.
: We need to put ablout 3.0 in each car
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when I call the org export dispatcher using &lt;code&gt;C-c C-e h o&lt;/code&gt; . The result
part is not displayed as the code snippet does. After checking the Org manual,
there is a variable &lt;code&gt;org-export-use-babel&lt;/code&gt; controing whether evaluate the code
snippet or not during exporting. Evan the variable is set to be &lt;code&gt;t&lt;/code&gt;, the code is
not evaluated. To control export the code, results or both, the &lt;code&gt;:export&lt;/code&gt; header
arguments should be set to &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;  or &lt;code&gt;both&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;In summary, in order to control the evaluation and export, &lt;code&gt;results&lt;/code&gt; and
&lt;code&gt;export&lt;/code&gt; header arguments are necessary.&lt;/p&gt;

&lt;h2 id=&#34;change-the-systematic&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; change the systematic&lt;/h2&gt;

&lt;p&gt;If you install several versions of Python in your system, you have to
choose one as the default.  Execute the following to set the priority list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to switch to a different version of Python, just execute the
following comand :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo update-alternatives --config python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then choose the right number from the popup menu.&lt;/p&gt;

&lt;h2 id=&#34;install-the-distutils-packages&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; install the distutils packages&lt;/h2&gt;

&lt;p&gt;After updating the python from 3.5 to 3.6, anaconda-mode does not work. In the
minibuffer, it says:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;InternalError: The subprocess /usr/bin/python3.6 has crashed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It takes me much time to begin to read the anaconda-mode buffer the find the
error message. what a stupid guy. The error message is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;module&amp;gt;
    from distutils.spawn import find_executable
ModuleNotFoundError: No module named &#39;distutils.spawn&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After several google, I install the &lt;code&gt;python3-distutils&lt;/code&gt; using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install python3-distutils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that it is &lt;code&gt;python3-distutils&lt;/code&gt; , not &lt;code&gt;python-distutils&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;After this, the auto-completion is live again.&lt;/p&gt;

&lt;h2 id=&#34;debug-python-in-emacs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; debug python in Emacs&lt;/h2&gt;

&lt;p&gt;During working on ex23.py, I have an idea to debug python in Emacs.&lt;/p&gt;

&lt;p&gt;I know it is &lt;code&gt;pdb&lt;/code&gt; that call the python debugger. However, when I use python3.6.
I have to modify it to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;python3.6 -m pdb ex23.py utf-8 strict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, I found that there is an extension &lt;a href=&#34;https://github.com/realgud/realgud/&#34; target=&#34;_blank&#34;&gt;realgud&lt;/a&gt; , which even allow you use the
&lt;code&gt;F10&lt;/code&gt; to next, &lt;code&gt;F11&lt;/code&gt; to step in, &lt;code&gt;shift F11&lt;/code&gt; to step out, &lt;code&gt;F5&lt;/code&gt; to run/continue.
More important all the shortcut are effective in the source code buffer, pretty
handy.&lt;/p&gt;

&lt;p&gt;You even can you mouse to set and clear breakpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>linear algebra done right</title>
      <link>https://zcl.space/math/linear-algebra-done-right/</link>
      <pubDate>Sat, 28 Apr 2018 22:00:00 +0800</pubDate>
      
      <guid>https://zcl.space/math/linear-algebra-done-right/</guid>
      <description>&lt;p&gt;During the study of linear algebra, several asistant materials are
referenced:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The opencourse 18.06 from &lt;a href=&#34;http://www-math.mit.edu/~gs/&#34; target=&#34;_blank&#34;&gt;Gilbert Strang&lt;/a&gt;. From Strang&amp;rsquo;s home, many
valuable materials are available.&lt;/li&gt;
&lt;li&gt;The textbook &lt;em&gt;Introduction to Linear Algebra&lt;/em&gt; by Gilbert Strang.&lt;/li&gt;
&lt;li&gt;The textbook &lt;em&gt;Linear Algebra Done Right&lt;/em&gt; by &lt;a href=&#34;http://www.axler.net/&#34; target=&#34;_blank&#34;&gt;Sheldon Axler&lt;/a&gt;. You can
get an abridged version of &lt;em&gt;Linear Algebra Done Right&lt;/em&gt; from Axler&amp;rsquo;s
homepage.&lt;/li&gt;
&lt;li&gt;The textbook &lt;em&gt;Matrix Analysis and Applied Linear Algebra&lt;/em&gt; by &lt;a href=&#34;http://meyer.math.ncsu.edu/&#34; target=&#34;_blank&#34;&gt;Carl D. Meyer&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By following Professor Strang, I got an overview of the four spaces of
one matrix. Actually, I learnt the 18.06 from the MIT OCW more than
one time. After each time, my understanding of linear algebra was
deepened.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>toeplitz matrix</title>
      <link>https://zcl.space/math/toeplitz-matrix/</link>
      <pubDate>Wed, 14 Mar 2018 19:53:00 +0800</pubDate>
      
      <guid>https://zcl.space/math/toeplitz-matrix/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#toeplitz-matrices&#34;&gt;Toeplitz Matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#some-asymptotic-properties-of-matrices&#34;&gt;Some Asymptotic Properties of Matrices&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#eigenvalues&#34;&gt;Eigenvalues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#matrix-norms&#34;&gt;Matrix Norms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;For such a long time, I have it on my list to write something for
Toeplitz matrix. I want to derive the fundamental theorems on the
asymptotic behavvior of eigenvalues, inverses, and products of banded
Toeplitz matrices. To achieve this goal, I read the famous paper
&lt;em&gt;Toeplitz and Circulant Matrices: A review&lt;/em&gt; by Robert M. Gray
&lt;sup id=&#34;ac945247a9e861b9ce0958daa357b943&#34;&gt;&lt;a href=&#34;#Gray_2005&#34; title=&#34;Gray, Toeplitz and Circulant Matrices: A Review, {Foundations and Trends&amp;#174; in Communications and Information
                  Theory}, v(3), 155&amp;#8211;239 (2005).&#34;&gt;Gray_2005&lt;/a&gt;&lt;/sup&gt; . I am fond of matrices with the style like Toeplitz
matrices imagining that there must be something special existing in
the square matrices. During writing this post, Matlab is also used to
finish some mathematical test.&lt;/p&gt;

&lt;h2 id=&#34;toeplitz-matrices&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Toeplitz Matrices&lt;/h2&gt;

&lt;p&gt;A Toeplitz matrix \(T\) is an square matrix with size \(n\times n\).
\(T_{n} = [t_{k,j}; k,j= 0,1,\ldots,n-1]\) where \(t_{k,j} =
t_{k-j}\).&lt;/p&gt;

&lt;p&gt;In matrix form, A toeplitz matrix can be expressed as:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:1}
T_{n} =
\begin{pmatrix}
t_{0} &amp;amp; t_{-1} &amp;amp; t_{-2} &amp;amp;\ldots &amp;amp; t_{-(n-1)} \\&lt;br /&gt;
t_{1} &amp;amp; t_{0}  &amp;amp; t_{-1} &amp;amp; \ldots &amp;amp;\vdots \\&lt;br /&gt;
t_{2} &amp;amp; t_{1}  &amp;amp; t_{0} &amp;amp; \ldots &amp;amp;\vdots \\&lt;br /&gt;
\vdots &amp;amp; \vdots &amp;amp;\vdots &amp;amp; \ddots &amp;amp; \vdots \\&lt;br /&gt;
t_{n-1} &amp;amp; \ldots &amp;amp; \ldots &amp;amp; \ldots &amp;amp; t_{0}
\end{pmatrix}
\end{equation}&lt;/p&gt;

&lt;p&gt;Because we dive into the details of Toeplitz matrix, some keypoints of
matrices are recaptured, such as the eigenvalues, Norms and
asymptotically equivalent matrices.&lt;/p&gt;

&lt;h2 id=&#34;some-asymptotic-properties-of-matrices&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Some Asymptotic Properties of Matrices&lt;/h2&gt;

&lt;p&gt;Most often, we can study the asymptotic behavior of complicated
matrices by studying a more structured and simplier asymptotically
equivalent matirx. This method is used in many fields. A toy model is
studied comprehensively before a more complicated one comes in.&lt;/p&gt;

&lt;h3 id=&#34;eigenvalues&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; Eigenvalues&lt;/h3&gt;

&lt;p&gt;Scalor \(\alpha\) and vector \(x\) satisfied \(Ax = \alpha x\) are
called the eigenvalue and the corresponding eigenvector. We can get
the eigenvalues by solving&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:2}
\det(A-\alpha I) = 0
\end{equation}&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, we assume that the eigenvalues are ordered
in noincreasing format, i.e. \(\alpha_{1} &amp;gt; \alpha_{2} &amp;gt; \ldots \).&lt;/p&gt;

&lt;p&gt;Any complex matrix \(A\) can be written as:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:3}
A = URU^{*}
\end{equation}&lt;/p&gt;

&lt;p&gt;where the asterisk \(*\) denotes conjugate transpose, \(U\) is
unitary, i.e., \(U^{-1} = U^{*}\) and \(R\) is  an upper triangular
matrix. The eigenvalues of \(A\) are the principle diagonal elements
of \(R\). if \(A\) is normal, i.e. if\(A^{*}A = AA^{*}\), then \(R\) is
a diagonal matrix, which we denote as \(R = diag(\alpha_{k})\). If
\(A\) is Hermitian, i.e. if \(A^{*} = A\), then the eigenvalues are
real. If a matrix is Hermitian, then it is also normal.&lt;/p&gt;

&lt;p&gt;For the case of Hermitian matrices, a useful description of the
eigenvalues is the variational description given by the
Courant-Fischer theorem.&lt;/p&gt;

&lt;div class=&#34;corollary&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;Define the Rayleigh quotient of an Hermitian matrix \(X\) and a vector
(complex \(n\)-tuple ) \(x\) by&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:4}
R_{H}(x) = (x^{*}Hx)/ (x^{*}x)
\end{equation}&lt;/p&gt;

&lt;p&gt;Let \(\eta_{M}\) and \(\eta_{m}\) be the maximum and minimum
eigenvalues of \(H\), respectively.&lt;/p&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;p&gt;\begin{eqnarray}
\label{eq:5}
\eta_{m}&amp;amp;=&amp;amp; \min_{x} R_{H}(x) = \min_{x:x^{*}x = 1} x^{*}Hx \\&lt;br /&gt;
\eta_{M}&amp;amp;=&amp;amp; \max_{x} R_{H}(x) = \max_{x:x^{* }x = 1} x^{*}Hx
\end{eqnarray}&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This corollary will be useful in specifying the interval containing
the eigenvalues of an Hermitian matrix.&lt;/p&gt;

&lt;p&gt;The following lemma is usefull when studying non-Hermitian matrices
and products of Hermitian matrices.&lt;/p&gt;

&lt;p&gt;Let \(A\) be a matrix with eigenvalues \(\alpha_{k}\). Define the
eigenvalues of the Hermitian matrix \(A^{*}A\) to be \(\lambda_{k}\).
Then:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:6}
\sum_{k=0}^{n-1} \lambda_{k} \geq \sum_{k=0}^{n-1}|\alpha_{k}|^{2}
\end{equation}&lt;/p&gt;

&lt;p&gt;with equality iff \(A\) is normal.&lt;/p&gt;

&lt;p&gt;Proff. The trace of a matrix is the sum of the diagonal elements of a
matrix. The trace is invariant to unitary operations so that it also
is equal to the sum of the eigenvalues of amatrix. i.e.,&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:7}
Tr (A^{*}A) = \sum_{k=0}^{n-1}(A^{*}A)_{k,k}  = \sum_{k=0}^{n-1} \lambda_{k}
\end{equation}&lt;/p&gt;

&lt;p&gt;We have&lt;/p&gt;

&lt;p&gt;\begin{eqnarray*}
Tr( {A^{*}A} ) &amp;amp;=&amp;amp; Tr( {R^{*}R} )  \\&lt;br /&gt;
&amp;amp;=&amp;amp; \sum_{k=0}^{n-1}\sum_{j=0}^{n-1} |r_{j,k}|^{2} \\&lt;br /&gt;
&amp;amp;=&amp;amp; \sum_{k=0}^{n-1} |\alpha_{k}|^{2} + \sum_{k\neq j} |r_{j,k}|^{2} \\&lt;br /&gt;
&amp;amp;\geq&amp;amp; \sum_{k=0}^{n-1} |\alpha_{k}|^{2}
\end{eqnarray*}&lt;/p&gt;

&lt;h3 id=&#34;matrix-norms&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Matrix Norms&lt;/h3&gt;

&lt;p&gt;To study the asymptotic equivalence of matrices we require a metric or
equivalently a norm of the appropriate kind. Here we use two norms the
operator and the Hilbert-Schmidt. We call the former the strong norm
and later the weak norm.&lt;/p&gt;

&lt;p&gt;Let \(A\) be a matrix with eigenvalues \(\alpha_{k}\) and let
\(\lambda_{k}\) be the eigenvalues of the Hermitian matrix \(A^{*}A\).
The strong norm \(\|A\|\) is difined by:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:8}
\|A\| = \max_{x} R_{A^{*}A}(x)^{&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;} = \max_{x:x^{*}x=1} [x^{*}A^{*}Ax]^{&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;}
\end{equation}&lt;/p&gt;

&lt;p&gt;According the corollary mentioned before, we have:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:9}
\|A\|^{2} = \max_{k}\lambda_{k} = \lambda_{M}
\end{equation}&lt;/p&gt;

&lt;p&gt;The strong norm of \(A\) can be bounded below by letting \(e_{M}\) be
the eigenvector of \(A\) corresponding to \(\alpha_{M}\), the
eigenvalue of \(A\) having largest absolute value:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:10}
\|A\|^{2} = \max_{x:x^{*}x = 1} x^{*}A^{*}Ax \geq (e_{M}^{*}A^{*}) (Ae_{M}) = |\alpha_{M}|^{2}
\end{equation}&lt;/p&gt;

&lt;p&gt;If \(A\) is itself Hermitian, then its eigenvalues \(\alpha_{k}\) are
real and the eigenvalues \(\lambda_{k}\) of \(A^{*}A\) are simply
\(\lambda_{k} = \alpha_{k}^{2}\). This follows since if \(e^{(k)}\) is
an eigenvector of \(A\) with eigenvalue \(\alpha_{k}\), then
\(A^{*}Ae^{(k)} = \alpha_{k}A^{*}e^{(k)} = \alpha_{k}^{2}e^{(k)}\).
Thus, in particular, if \(A\) is Hermitian then&lt;/p&gt;

&lt;p&gt;\begin{equation}
\label{eq:11}
\|A\| = \max_{k} |\alpha_{k}| = |\alpha_{M}|
\end{equation}&lt;/p&gt;

&lt;p&gt;The Hilbert-Schmidt norm of an \(n\times n\) matrix \(A =
{a_{k,j}}\) is defined by:&lt;/p&gt;

&lt;p&gt;\begin{eqnarray*}
|A| &amp;amp;=&amp;amp; \bigg(n^{-1}\sum_{k=0}^{n-1} \sum_{j=0}^{n-1} |a_{k,j}|^{2}\bigg)^{\tfrac{1}{2}} \\&lt;br /&gt;
&amp;amp;=&amp;amp; \bigg(n^{-1} Tr[A^{*}A] \bigg)^{\tfrac{1}{2}} \\&lt;br /&gt;
&amp;amp;=&amp;amp; \bigg( n^{-1} \sum_{k=0}^{n-1} \lambda_{k} \bigg)^{\tfrac{1}{2}}
\end{eqnarray*}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repeated Tasks in Emacs Org</title>
      <link>https://zcl.space/tools/repeated-tasks-in-emacs-org/</link>
      <pubDate>Sun, 04 Mar 2018 09:32:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/repeated-tasks-in-emacs-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#repeater-in-org&#34;&gt;Repeater in Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#a-special-repeater&#34;&gt;a special repeater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#the-dot-repeater&#34;&gt;the &lt;code&gt;.+&lt;/code&gt; repeater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#repeated-period&#34;&gt;repeated period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;Timestamps in Emacs Org are easy. Setting timestamps for repeated
tasks are more interesting. It is quite often in daily life that some
tasks will be repeated day by day, such as having lunch and afternoon
nap, taking exercise. Org has a repeater in a task with a deadline or
scheduled.&lt;/p&gt;

&lt;h2 id=&#34;repeater-in-org&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Repeater in Org&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO take a noon nap
DEADLINE:&amp;lt;2018-03-04 Sun 12:30 +1d&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+1d&lt;/code&gt; is a time repeater. The task &lt;code&gt;take a noon nap&lt;/code&gt; is intened to be done
every day at 12:30. The interesting part is that everytime the state
of the task is changed from TODO to DONE. The task will be changed to
TODO again with the timestamp changed for the next day automatically.
For the user, you will never see the DONE state. The task with a
repeater is always in TODO state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;d&lt;/code&gt; in &lt;code&gt;+1d&lt;/code&gt; means day. In a straightforward way, it can be &lt;code&gt;h&lt;/code&gt;  for
an hour, &lt;code&gt;w&lt;/code&gt; for a week, &lt;code&gt;m&lt;/code&gt; for a month, &lt;code&gt;y&lt;/code&gt; for a year.&lt;/p&gt;

&lt;p&gt;Deadlines and scheduled items generate an agenda item. If you want to
be warned before a period you can add a warning period in the
timestamp.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO take a noon nap
DEADLINE:&amp;lt;2018-03-04 Sun 12:30 +1d -10m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-3h&lt;/code&gt; means that the task will appear ten minutes before 12:30.  For a
traditional task with a TODO having a deadline or scheduled time, once
it was done, the item will disappear from the agenda. However, for a
task with a repeater, Org will increase the date of the timestamp by
the interval indicated by the repeater then set the task to TODO state
immediately. The task will appear in all the agenda from the timestamp
on.&lt;/p&gt;

&lt;h2 id=&#34;a-special-repeater&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; a special repeater&lt;/h2&gt;

&lt;p&gt;For &lt;code&gt;+1d&lt;/code&gt; the repeater will always adding one day every time you change
the task from TODO to DONE. However, for the task like taking a nap,
having a deadline at 2018-03-04, if you forget to change it from TODO
to DONE on 2018-03-04 and you do this on 2018-03-05, The timestamp
will not change to 2018-03-06. It will be 2018-03-05, this is werid
because you have already done the task on 2018-03-05. You have to
chage the task from TODO to DONE again so that the deadline timestamp
will be 2018-03-06.&lt;/p&gt;

&lt;p&gt;For the scenario mentioned above, Org has repeaters with a special
format &lt;code&gt;++&lt;/code&gt;  and &lt;code&gt;.+&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO take a noon nap
DEADLINE:&amp;lt;2018-03-04 Sun 12:30 ++1d&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;++1d&lt;/code&gt; the deadline of a repeated task will always be tomorrow
everytime you change the state from TODO to DONE even you forget to
finish it several times.&lt;/p&gt;

&lt;p&gt;Actually, this kind of task is quite common in daily life. Taking
calling your father weakly for example, if you forget to call him
three weeks, it is impossible to call him three times in a week to
make things up.&lt;/p&gt;

&lt;h2 id=&#34;the-dot-repeater&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; the &lt;code&gt;.+&lt;/code&gt; repeater&lt;/h2&gt;

&lt;p&gt;Similar with &lt;code&gt;++&lt;/code&gt; , &lt;code&gt;.+&lt;/code&gt; will shift the date to the future after &lt;strong&gt;today&lt;/strong&gt; .
Take the following task for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO pay the telephone fee
DEADLINE: &amp;lt;2018-03-04 Sun 09:17 .+1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you finish this task on 2018-03-01, Org will shift the task like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO pay the telephone fee
DEADLINE: &amp;lt;2018-04-01 Sun 09:17 .+1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repeated-period&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; repeated period&lt;/h2&gt;

&lt;p&gt;Sometimes, you know how long the repeated task will last. Take the
noon nap for example, usually I will set up a alarm to wake me up half
an hour later. So, I can set the task with repeated period instead of
repeated timestamp.&lt;/p&gt;

&lt;p&gt;So the noon nap event will be like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;**TODO take a noon nap
SCHEDULE:&amp;lt;2018-03-04 Sun 12:30-13:30 ++1d&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will schedule a noon nap every day from 12:30 to 13:00.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extends Emacs Org Mode on iOS Device</title>
      <link>https://zcl.space/tools/using-emacs-org-mode-on-ios-device/</link>
      <pubDate>Sun, 04 Mar 2018 09:31:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/using-emacs-org-mode-on-ios-device/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#beorg&#34;&gt;BeOrg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#drafts&#34;&gt;Drafts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#dropbox&#34;&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;I use two APPs &lt;a href=&#34;https://itunes.apple.com/us/app/beorg/id1238649962?mt=8&#34; target=&#34;_blank&#34;&gt;BeOrg&lt;/a&gt; and &lt;a href=&#34;https://itunes.apple.com/us/app/drafts-quick-capture/id905337691?mt=8&#34; target=&#34;_blank&#34;&gt;Drafts&lt;/a&gt; as Org&amp;rsquo;s extension on my iOS device.
Oh, almost foget it. Another one: dropbox. Beorg and Drafts stores the
captures of ideas into dropbox. I retrive them when I am home on
Windows 10 using my Surface Pro.&lt;/p&gt;

&lt;p&gt;The relationship among all the APPs I mentioned above is like&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org719fbfe&#34;&gt;&lt;/a&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180225orgmobile.png&#34; alt=&#34;Figure 1: My using of Org mode through mobile device&#34; width=&#34;600&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: My using of Org mode through mobile device
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Actually, I also tried another APP named MobileOrg, but dislike it
because of its inflexibility ,boring GUI and hard-to-config. The
combination of Beorg and Drafts works well for me with their playing
each&amp;rsquo;s own role.&lt;/p&gt;

&lt;h2 id=&#34;beorg&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; BeOrg&lt;/h2&gt;

&lt;p&gt;Using BeOrg, I only capture a TODO. I leave capturing a note to Drafts
which is good at notes.&lt;/p&gt;

&lt;p&gt;One screenshot of Beorg is shown as:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180225beorg.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The green button is used to add a todo capture. As you can see, Beorg
can also read the todos from your iOS calendar (I am sorry for whom
cannot read Chinese. That item in Chinese comes from iOS calendar
reminding me to pick up the magazines and newspaper).&lt;/p&gt;

&lt;p&gt;By default, Beorg display the week agenda. The TODO states are also
can be customized. I set the file synchronization method as dropbox
and set the org directory which is shared with Drafts and my windows.
So I can keep the org files consistent.&lt;/p&gt;

&lt;p&gt;Beorg also has an option for quick capture. Naturally, I also set it
as the inbox of my Org mode on Drafts and Windows. You can also
control the vivibility of your iOS calendars, i.e. which part shoule
be integrated into BeOrg agenda view, the family? personal? work? You
name it, as you wish.&lt;/p&gt;

&lt;h2 id=&#34;drafts&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Drafts&lt;/h2&gt;

&lt;p&gt;Drafts is the most efficient tool for taking a note. All you need is
to focus on writing. Furthermore, you can even export your notes to
way many other APPs such as evernote, markdown, oneDrive, google drive
and so on. There are tons of commands available on the &lt;a href=&#34;http://drafts4-actions.agiletortoise.com/&#34; target=&#34;_blank&#34;&gt;action
directory of Drafts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Combined with dropbox, I config several commands of my own. One
screenshot is like:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180225drafts.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Take my command &lt;code&gt;Drafts TODO BeOrg&lt;/code&gt; for example, the step is append
files on Dropbox and the content is shown as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; * TODO  [[title]]
SCHEDULED: &amp;lt;[[created|%Y-%m-%d %a]]&amp;gt;
[[body]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, I set the format of creating timestamp the same as Emacs
Org so that Emacs Org can follow the todo from Drafts.&lt;/p&gt;

&lt;p&gt;Of course, you can define your own command in Drafts just read the document.&lt;/p&gt;

&lt;h2 id=&#34;dropbox&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Dropbox&lt;/h2&gt;

&lt;p&gt;The configuration of Dropbox is easy. All you have todo is to put the
org files in a directory where Beorg, Drafts and Windows knows.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Take a Diary Using Emacs Org</title>
      <link>https://zcl.space/tools/take-a-diary-using-emacs-org/</link>
      <pubDate>Sun, 25 Feb 2018 19:47:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/take-a-diary-using-emacs-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#set-up&#34;&gt;Set up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;There is one diary system built in Emacs. When you are in the
Calendar buffer, press &lt;code&gt;i&lt;/code&gt; will bring you a menu to select what
kind of diary you want to take. However, as a loyal fan of Emacs
Org, I want to take diary using Org.&lt;/p&gt;

&lt;p&gt;When I am in the org agenda buffer, press &lt;code&gt;i&lt;/code&gt; will bring me a menu
like what show in the calendar buffer after pressing &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;set-up&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Set up&lt;/h2&gt;

&lt;p&gt;It seems that all you need to do is set the &lt;code&gt;org-agenda-diary-file&lt;/code&gt;,
  so that Org knows where to put the diary file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-agenda-diary-file  &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, everything is left for Org mode. All you have to do
is writing your diary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Journal your life Using Emacs Org</title>
      <link>https://zcl.space/tools/journal-your-life-using-emacs-org/</link>
      <pubDate>Tue, 20 Feb 2018 22:21:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/journal-your-life-using-emacs-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#keys&#34;&gt;Keys&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#global-bindings&#34;&gt;Global Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#major-mode-bindings&#34;&gt;Major Mode Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#calendar-mode-bindings&#34;&gt;Calendar Mode Bindings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#take-a-journal&#34;&gt;Take a Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#browse-your-journal&#34;&gt;Browse Your Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; &lt;a href=&#34;#search-your-journal&#34;&gt;Search Your Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; &lt;a href=&#34;#after-a-period&#34;&gt;After a Period&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;Long time ago, I read a post about &lt;a href=&#34;https://www.emacswiki.org/emacs/PersonalDiary&#34; target=&#34;_blank&#34;&gt;taking daily journal using Emacs&lt;/a&gt;.
Until recently, I realized that I need to take journals on my work.
So I read the post again and integrate the configuration into my
.spacemacs.d.&lt;/p&gt;

&lt;p&gt;In general, I use this journal system to note down my work. This
journal system is simple and easy to use and maintain.&lt;/p&gt;

&lt;p&gt;Here, I am not going to preach why you should keep a daily
journal. Google will tell you more.&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Install&lt;/h2&gt;

&lt;p&gt;If you want to Install the org-journal layer, just clone my
&lt;a href=&#34;https://github.com/emacsun/.spacemacs.d&#34; target=&#34;_blank&#34;&gt;.spacemacs.d&lt;/a&gt; there is a layer named &lt;code&gt;zcljournal&lt;/code&gt;, which is forked
from &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal&#34; target=&#34;_blank&#34;&gt;spacemacs-journal&lt;/a&gt; with a little modified.&lt;/p&gt;

&lt;p&gt;To use this journal system, you need set &lt;code&gt;org-journal-dir&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-journal-dir &amp;quot;~/.spacemacs.d/journal/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keys&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Keys&lt;/h2&gt;

&lt;h3 id=&#34;global-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; Global Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view journal of today&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search journals within a specified time interval&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search all journal for a string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;major-mode-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; Major Mode Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;next journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;previous journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search the current journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;read journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;display journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search all journals&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar week&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar month&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also, you can replace the prefix &lt;code&gt;SPC m&lt;/code&gt; with &lt;code&gt;,&lt;/code&gt; which is more
handy.&lt;/p&gt;

&lt;h3 id=&#34;calendar-mode-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; Calendar Mode Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view an entry in a new buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view an entry but do not switch to it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;go to next day with journal entries&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;go to previous day with journal entries&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of all time&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current week&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current month&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;take-a-journal&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; Take a Journal&lt;/h2&gt;

&lt;p&gt;After setting, you can take journal anywhere and anytime. In the
buffer not in &lt;code&gt;Org&lt;/code&gt; mode, &lt;code&gt;SPC a j j&lt;/code&gt; will generate and new
journal entry. In &lt;code&gt;Org&lt;/code&gt; mode, &lt;code&gt;SPC m j j&lt;/code&gt; or &lt;code&gt;, j j&lt;/code&gt; will also
bring a new journal entry.&lt;/p&gt;

&lt;h2 id=&#34;browse-your-journal&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; Browse Your Journal&lt;/h2&gt;

&lt;p&gt;To browse your journal, you&amp;rsquo;d better in the Calendar buffer using
&lt;code&gt;calendar&lt;/code&gt; which I bind to &lt;code&gt;SPC o C&lt;/code&gt; . In this buffer, press &lt;code&gt;J&lt;/code&gt;
there will be a menu popping up for you.
&lt;img src=&#34;https://zcl.space/img/tools/20180221orgjournal.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the day with a journal is highlighted in yellow (
you can custom it to other colors ).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;keys&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;jump to next day having a journal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;jump to previous day having a journal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;display journal of current day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;search-your-journal&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;6&lt;/span&gt; Search Your Journal&lt;/h2&gt;

&lt;p&gt;The key I use most is &lt;code&gt;org-journal-search-forever&lt;/code&gt; which I bind to
&lt;code&gt;SPC a j S&lt;/code&gt; and you can search all your journals anytime and
anywhere. You can also search a certain period by &lt;code&gt;SPC a j s&lt;/code&gt;
with which you need to enter the begin and end of the period in
the minibuffer.&lt;/p&gt;

&lt;p&gt;There are other search options which allow you search in a week,
month and a year. However, to search your journal in a week, a
month and a year, you need in the Calendar buffer.&lt;/p&gt;

&lt;h2 id=&#34;after-a-period&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;7&lt;/span&gt; After a Period&lt;/h2&gt;

&lt;p&gt;After a Period, say a month, there are quite a lot journals under
the &lt;code&gt;org-journal-dir&lt;/code&gt; . One day One journal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version Control Using Magit in Spacemacs</title>
      <link>https://zcl.space/tools/version-control-emacs-magit/</link>
      <pubDate>Tue, 20 Feb 2018 22:14:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/version-control-emacs-magit/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#commit-your-changes&#34;&gt;Commit Your Changes&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is an &lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;official layer&lt;/a&gt; called &lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;builtin spacemacs. The &lt;code&gt;git&lt;/code&gt;
layer is based on &lt;code&gt;magit&lt;/code&gt; . Actually, on the magit website, you can
always find what you want. This post is a summary of How I use magit
in spacemacs.&lt;/p&gt;

&lt;p&gt;I like the magit website because of the beautiful font and pleasing
color combination. More important is the maintainor Jonas Bernoulli
who devotes his yearly efforts to coin the magit great for Emacsers.
Now, after &lt;a href=&#34;https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client/posts/1988383&#34; target=&#34;_blank&#34;&gt;a successful campaign on the Kickstarter&lt;/a&gt;, Jonas Bernoulli
was able to work on Magit full-time for another year, which was he&amp;rsquo;d
love to.&lt;/p&gt;

&lt;p&gt;Lets&amp;rsquo;s goto my daily use of Magit in Spacemacs. If you are not using
&lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;Spacemacs&lt;/a&gt;, I highly recommend it for you.&lt;/p&gt;

&lt;h2 id=&#34;commit-your-changes&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Commit Your Changes&lt;/h2&gt;

&lt;p&gt;Suppose you have already make some changes on a project version
controlled using Git, the next step is to stage the changes and then
commit the changes.&lt;/p&gt;

&lt;p&gt;If your cursor are in the buffer of a file belonging to that project,
press &lt;code&gt;SPC g s&lt;/code&gt; will bring you to the magit buffer of current project.&lt;/p&gt;

&lt;p&gt;If your cursor are not in the buffer of a file belongint to that
project, using &lt;code&gt;SPC p p&lt;/code&gt; goto the helm-projectile buffer, then move
cursor to the project, then press &lt;code&gt;M-g&lt;/code&gt;, you will goto the magit
buffer of current project.&lt;/p&gt;

&lt;p&gt;Taking my &lt;code&gt;.spacemacs.d&lt;/code&gt; project for example, after some modifications
on the config, I want to commit the changes. The mentioned two ways
bring me to a magit buffer like this:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org5295721&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer1.png&#34; alt=&#34;Figure 1: magit buffer of my .spacemacs.d&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: magit buffer of my .spacemacs.d
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;From the above buffer, it records that I have one untracted file and
two unstaged changes on two existing files. On the headlines of the
untracted files and unstaged changes, press &lt;code&gt;s&lt;/code&gt; will stage all the
untracted files and unstaged changes. If you are not at the headlines,
to stage all the changes you need to press &lt;code&gt;S&lt;/code&gt;. After this, the buffer
become:&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&#34;org0ea80ea&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer2.png&#34; alt=&#34;20180219magitbuffer2.png&#34; width=&#34;400&#34; align=&#34;center&#34; /&gt;
If you regret, press &lt;code&gt;u&lt;/code&gt; to unstage the changes. If you want to
commit, just press &lt;code&gt;c&lt;/code&gt;, you will get a menu.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgd124ad0&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer3.png&#34; alt=&#34;Figure 3: press `c`  to commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 3: press `c`  to commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The menu is clear for you to choose. If nothing to change, just press
&lt;code&gt;c&lt;/code&gt; again, and there will a buffer pop up for you to take some notes
on this commit. Also, there is a buffer showing the diff of this
commit. If you regret at this moment, just press &lt;code&gt;C-c C-k&lt;/code&gt; to abort
the commit.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org9fdf700&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer4.png&#34; alt=&#34;Figure 4: press `c` to commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 4: press `c` to commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After finishing the notes, press &lt;code&gt;C-c C-c&lt;/code&gt; to finish the commit. you
are in a buffer showing the current state of the project.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6d0c626&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer5.png&#34; alt=&#34;Figure 5: after commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 5: after commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;It shows that I am ahead one commit of the remote/master. So, If you
want to push the commit to the remote/master, press &lt;code&gt;p&lt;/code&gt; , a buffer
will popup for you to choose where to push.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org25db75a&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer6.png&#34; alt=&#34;Figure 6: press `u`  to push&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 6: press `u`  to push
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;u&lt;/code&gt; to push the commit to the origin/master, and you get:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org34e0b94&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer7.png&#34; alt=&#34;Figure 7: after pushing to the origin/master&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 7: after pushing to the origin/master
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Then a commit is finished locally and remotely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write in Emacs</title>
      <link>https://zcl.space/tools/write-in-emacs/</link>
      <pubDate>Tue, 20 Feb 2018 22:13:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/write-in-emacs/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#writing-a-book-in-emacs&#34;&gt;writing a book in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#extensions-that-facilitate-writing&#34;&gt;Extensions that facilitate writing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#working-environment&#34;&gt;Working Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#org&#34;&gt;Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; &lt;a href=&#34;#spell-checking&#34;&gt;Spell Checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.4&lt;/span&gt; &lt;a href=&#34;#moving-around&#34;&gt;Moving around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.5&lt;/span&gt; &lt;a href=&#34;#count-words&#34;&gt;count words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.6&lt;/span&gt; &lt;a href=&#34;#focus-on-current-section&#34;&gt;focus on current section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#reference&#34;&gt;Reference&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;writing-a-book-in-emacs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; writing a book in Emacs&lt;/h2&gt;

&lt;p&gt;I am not going to preach the powerful tool, Org. In this post, I want
to write something on the tools which facilitate the literature
writing. Indeed, if I am going to write a book someday (when time is
not a problem), the very tool I will adopt definitely is Emacs.&lt;/p&gt;

&lt;p&gt;With high probability, I will adopt the &lt;a href=&#34;https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs&#34; target=&#34;_blank&#34;&gt;workflow like Mickey Petersen
did&lt;/a&gt;. Also, Emacs has many extensions that make writing a book or an
article in large size possible. In general, I will write it in Org
mode, and export the book to other format with just a &lt;code&gt;C-c C-e&lt;/code&gt;, which
is a convenient shortcut memorized by my muscle.&lt;/p&gt;

&lt;h2 id=&#34;extensions-that-facilitate-writing&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Extensions that facilitate writing&lt;/h2&gt;

&lt;h3 id=&#34;working-environment&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; Working Environment&lt;/h3&gt;

&lt;p&gt;My working Environment is listed as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows 10 on Surface Pro 4;&lt;/li&gt;
&lt;li&gt;Emacs 25.0.5;&lt;/li&gt;
&lt;li&gt;Org 9.1.6;&lt;/li&gt;
&lt;li&gt;Also, I use spacemacs, a comprehensive configuration with many
functions organized as layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;org&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Org&lt;/h3&gt;

&lt;p&gt;The Org mode, the killer extension, makes Emacs great again. I surely
did quite a few customization on Org. However, I use the org layer
shipped with spacemacs.&lt;/p&gt;

&lt;p&gt;Also, you can &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&#34; target=&#34;_blank&#34;&gt;configure Org like a word processor&lt;/a&gt;. Org-bullet package
make Org mode beautiful. I set Org bullets as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-bullets-bullet-list &#39;(&amp;quot;✿&amp;quot; &amp;quot;❀&amp;quot; &amp;quot;♣&amp;quot; &amp;quot;♧&amp;quot; ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned before, you can export your Org file using several
formats such as HTML,TeX, PDF, Markdown and so on.&lt;/p&gt;

&lt;p&gt;I use Org writing my own blog through &lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;. Of course, I use Hugo.
Why not? Hugo is fast and disk-space-friend. Hugo also has its windows
distribution. ox-hugo export the org files as markdown files which are
supported by hugo.&lt;/p&gt;

&lt;p&gt;I use Org to export PDF based on the latex class defined &lt;a href=&#34;https://github.com/emacsun/org-article&#34; target=&#34;_blank&#34;&gt;org-article&lt;/a&gt;
,which is a latex class I forked from &lt;a href=&#34;https://github.com/tsdye/org-article&#34; target=&#34;_blank&#34;&gt;tsdye/org-article&lt;/a&gt; and added the
support for Chinese characters. Org-article is a flexible latex class
and export beautiful PDF with the good-looking fonts and architecture.&lt;/p&gt;

&lt;h3 id=&#34;spell-checking&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; Spell Checking&lt;/h3&gt;

&lt;p&gt;Using flyspell, spell checking is easy. There is a layer named
spell-checking distributed with spacemacs.&lt;/p&gt;

&lt;p&gt;I use aspell instead of ispell. So, I set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default ispell-program-name &amp;quot;C:/Aspell/bin/aspell.exe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you have to install aspell and the dictionaries. I use the
&lt;a href=&#34;http://aspell.net/win32/&#34; target=&#34;_blank&#34;&gt;Win32 version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using flyspell mode, you can also insert some word into your personal
dictionary.&lt;/p&gt;

&lt;h3 id=&#34;moving-around&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.4&lt;/span&gt; Moving around&lt;/h3&gt;

&lt;p&gt;Using Spacemacs, moving around is easy because it has almost all the
jumping shortcuts used in Vim (if you use the Vim mode in spacemacs).&lt;/p&gt;

&lt;p&gt;On the other hand, using Org, you can jump from headline to headline
easily. Promoting and demoting a headline is also fast. You can even
change the head level of a headline using just a few keystrokes.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tab&lt;/code&gt; key is a useful shortcut to change the face of how the Org
buffer looks like. I use the &lt;code&gt;tab&lt;/code&gt; key to give me a sketch view of the
post I am working on. Furthermore, you can even use the narrow
function to restrict the buffer showing only the section of subsection
part you are working if your file is getting large and you don&amp;rsquo;t want
to be distracted by other parts of your article.&lt;/p&gt;

&lt;p&gt;Through the writing of this post, I also using the commands moving
around sentences and paragraphs often.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgac7136d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  move around in Org files
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;commands&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;h,j,k,l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the basic Vim keys, need no description&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the end of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of a sentence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the end of a sentence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move a paragraph up  when cursor stays in a paragraph&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move a paragraph down when cursor stays in a paragraph&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-{&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of previous paragraph&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of next paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the Org mode, the following commands are also very convenient.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;M-j&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;org metadown when cursor stays in a headline&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org metaup when cursor stays in a headline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;promote a headline when cursor stays in a headline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;demote a headline when cursor stays in a headline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c C-f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the next headline of the same level&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c C-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the previous headline of the same level&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c C-n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the next headline, not necessarily the same level&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c C-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the previous headline, not necessarily the same level&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;count-words&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.5&lt;/span&gt; count words&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;count-words&lt;/code&gt; is a command built in Emacs. There is a github
repository &lt;a href=&#34;https://github.com/LdBeth/advance-words-count.el&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;advance words count&amp;rdquo;&lt;/a&gt; which helps count the CJK word. If
you write in CJK language, it will be handy.&lt;/p&gt;

&lt;h3 id=&#34;focus-on-current-section&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.6&lt;/span&gt; focus on current section&lt;/h3&gt;

&lt;p&gt;Three handy functions help me focus on what I am working on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the fullscreen &lt;code&gt;spacemacs/toggle-fullscreen-frame&lt;/code&gt; which block
distractions from other apps.&lt;/li&gt;
&lt;li&gt;the org-capture which allow me capture the ideas or
aspirations hitting my head.&lt;/li&gt;
&lt;li&gt;the narrow function. This is extremely useful especially when
your article or post have quite a lot sections. You can narrow
your buffer to the very section you are working on.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;reference&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Reference&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs&#34; target=&#34;_blank&#34;&gt;how-to-write-a-book-in-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4kj7cv/emacs_for_writing_tell_me_your_tricks/&#34; target=&#34;_blank&#34;&gt;Emacs for writing ? Tell me your tricks !&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tonyballantyne.com/EmacsWritingTips.html&#34; target=&#34;_blank&#34;&gt;My Emacs Writing Setup&lt;/a&gt; . This is an old post by Tony
Ballantyne, a writer, whose blog &lt;a href=&#34;http://tonyballantyne.com/&#34; target=&#34;_blank&#34;&gt;http://tonyballantyne.com/&lt;/a&gt;
provides a lot of information on how to write.&lt;/li&gt;
&lt;li&gt;On &lt;a href=&#34;http://irreal.org/blog/?p=4664&#34; target=&#34;_blank&#34;&gt;irreal.org&lt;/a&gt; , you can always find something unexpectedly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ontologicalblog.com/2016/10/14/an-absolute-beginners-guide-to-spacemacs-for-academic-writing/&#34; target=&#34;_blank&#34;&gt;An Absolute Beginners Guide to Spacemacs for Academic Writing&lt;/a&gt;  .
This post is a comprehensive guide for beginners using spacemacs. I
learn quite a lot from it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pandoc.org/&#34; target=&#34;_blank&#34;&gt;Pandoc&lt;/a&gt;, the swiss-army knife for file format conversion.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs as a calculator through Cals</title>
      <link>https://zcl.space/tools/calc-in-emacs/</link>
      <pubDate>Tue, 20 Feb 2018 17:13:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/calc-in-emacs/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#main-features&#34;&gt;Main Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#switch-between-the-algebraic-and-rpn-mode&#34;&gt;switch between the algebraic and RPN mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#adding-two-numbers&#34;&gt;adding two numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#reference&#34;&gt;reference&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;In Emacs, execute &lt;code&gt;M-x calc&lt;/code&gt; and you are in a &lt;code&gt;Calc&lt;/code&gt; buffer. At first
time, perhaps you will be confused how begin. Press &lt;code&gt;?&lt;/code&gt; you will get a
help manual.&lt;/p&gt;

&lt;p&gt;Normally, Calc uses the RPN (Reverse Polish Notation) notation, which
is not the natation what I am familiar with. However, It did not take
me much time to get used to it. Generally, the core of an RPN
calculator is the stack. A calculator stack is like a stack of dishes.
New dishes are added at the top of the stack, and numbers are normally
only removed from the top of the stack. Also, in a RPN calculator,
operands are always entered first, the operator second. The calculator
pops the appropriate number of operands from the stack and pushes back
the result.&lt;/p&gt;

&lt;p&gt;Take &lt;code&gt;2+3&lt;/code&gt; for example, first, you enter 2;second , 3; at last, you
enter &lt;code&gt;+&lt;/code&gt; . Then the 2 and 3 pops from the stack and 5 are pushed on
the top of the stack.&lt;/p&gt;

&lt;h2 id=&#34;main-features&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Main Features&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Choice of algebraic or RPN entry of calculations;&lt;/li&gt;
&lt;li&gt;Arbitrary precision integers and floating-point numbers.&lt;/li&gt;
&lt;li&gt;Arithmetic on rational numbers, complex numbers (rectangular and
polar), error forms with standard deviations, open and closed
intervals, vectors and matrices, dates and times, infinities, sets,
quantities with units, and algebraic formulas.&lt;/li&gt;
&lt;li&gt;Mathematical operations such as logarithms and trigonometric
functions.&lt;/li&gt;
&lt;li&gt;Programmer&amp;rsquo;s features (bitwise operations, non-decimal numbers).&lt;/li&gt;
&lt;li&gt;Financial functions such as future value and internal rate of
return.&lt;/li&gt;
&lt;li&gt;Number theoretical features such as prime factorization and
arithmetic modulo m for any m.&lt;/li&gt;
&lt;li&gt;Algebraic manipulation features, including symbolic calculus.&lt;/li&gt;
&lt;li&gt;Moving data to and from regular editing buffers.&lt;/li&gt;
&lt;li&gt;Embedded mode for manipulating Calc formulas and data directly
inside any editing buffer.&lt;/li&gt;
&lt;li&gt;Graphics using GNUPLOT, a versatile (and free) plotting program.&lt;/li&gt;
&lt;li&gt;Easy programming using keyboard macros, algebraic formulas,
algebraic rewrite rules, or extended Emacs Lisp.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the features listed above, we can see Calc is a versatile
calculator. It is almost impossible for me to touch all the features
during daily use. Calc is large and maybe intimidating to the
first-time user. My knowledge of Calc grows as time goes by. I use
Calc every time when I want to calculate something. Day by day, I
learn more and more about Calc.&lt;/p&gt;

&lt;p&gt;This post is the record of my use of Calc.&lt;/p&gt;

&lt;h2 id=&#34;switch-between-the-algebraic-and-rpn-mode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; switch between the algebraic and RPN mode&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;calc-algebraic-entry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command is used to input an expression in the algebraic mode
temporally. After this the Calc is in RPN mode. When you execute
the &lt;code&gt;calc-algebraic-entry&lt;/code&gt; the minibuffer will be leading by the
word &lt;strong&gt;Algebraic:&lt;/strong&gt; instead of &lt;strong&gt;Calc:&lt;/strong&gt;, which is used in the RPN
mode.&lt;/p&gt;

&lt;p&gt;After the &lt;strong&gt;Algebraic:&lt;/strong&gt; you can enter your algebraic expression.&lt;/p&gt;

&lt;p&gt;In the Calc buffer, press &lt;code&gt;&#39;&lt;/code&gt; also bring you the algebraic mode.
Press &lt;code&gt;&#39;&lt;/code&gt; two times bring you the last algebraic expression you
entered.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;calc-algebraic-mode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will turn the Calc into algebraic mode. After calling
this command, every time you enter something in the Calc buffer,
the Calc is in the algebraic mode i.e. every time you enter
something , the minibuffer will be leading &lt;strong&gt;Algebraic:&lt;/strong&gt; . So any
algebraic expression is accepted. I even try the &lt;code&gt;2 + log10(100)&lt;/code&gt;
and it returns &lt;code&gt;4&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;adding-two-numbers&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; adding two numbers&lt;/h2&gt;

&lt;p&gt;In the RPN mode, you enter the first operand and the second
operand, at last you enter &lt;code&gt;+&lt;/code&gt; , then the first operand and the
second operand pops out of the stack and the result is pushed
back.&lt;/p&gt;

&lt;p&gt;subtraction, multiplication and divide are in a straightforward
way.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; reference&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2009/06/23/&#34; target=&#34;_blank&#34;&gt;The Emacs Calculator.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/calc/index.html#Top&#34; target=&#34;_blank&#34;&gt;The manual: The GNU Emacs Calculator.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>极简欧洲史</title>
      <link>https://zcl.space/life/brief-history-of-europe/</link>
      <pubDate>Mon, 19 Feb 2018 14:39:00 +0800</pubDate>
      
      <guid>https://zcl.space/life/brief-history-of-europe/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#从混合体迈向文明&#34;&gt;从混合体迈向文明&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#混合体的欧洲&#34;&gt;混合体的欧洲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#1000年以后&#34;&gt;1000年以后&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#政治体制的演进&#34;&gt;政治体制的演进&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#东罗马帝国的灭亡&#34;&gt;东罗马帝国的灭亡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#民主意识发端于希腊&#34;&gt;民主意识发端于希腊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#共和体制的变态&#34;&gt;共和体制的变态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#杂记&#34;&gt;杂记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;今天上午，读完极简欧洲史，感谢儿子不闹，感谢老婆安抚儿子不闹。&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;

&lt;p&gt;作为一个亚洲人，在阅读《极简欧洲史》的时候的确碰到了一些疑惑。阅读期间
问自己的最多问题是：这有什么好争的？&lt;/p&gt;

&lt;p&gt;然而在欧洲的历史上：教皇，国王和人民为宗教，皇权和人权的确展开了一系列
旷日持久的斗争，他们的斗争构成了历史。这本书除了关于语言介绍的&lt;/p&gt;

&lt;p&gt;本文是这本书的阅读笔记。&lt;a href=&#34;https://www.evernote.com/shard/s250/sh/6d5fc068-f032-43b9-87dc-4030ccf2e906/80e9f6cd8a11dd24d0646aba2b9cf67a&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;是我的阅读书摘。&lt;/p&gt;

&lt;h2 id=&#34;从混合体迈向文明&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; 从混合体迈向文明&lt;/h2&gt;

&lt;p&gt;全书一共两部分，第一部分讲欧洲如何从一个混合体演变到稳定格局，第二部分
阐述现代世界一些先进的理念如何从欧洲诞生。本书除了第七章： &lt;em&gt;语言：从两
种变几十种&lt;/em&gt; 和第八章： &lt;em&gt;常民百姓的生活面貌&lt;/em&gt; 之外，始终围绕着宗教，皇权
和民权这条主线展开，结构严谨。即便是第七章和第八章也是前六章铺垫的结果。&lt;/p&gt;

&lt;h3 id=&#34;混合体的欧洲&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; 混合体的欧洲&lt;/h3&gt;

&lt;p&gt;在欧洲文明发端之际，它的组成元素有三个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;古希腊和罗马文化；&lt;/li&gt;
&lt;li&gt;基督教；&lt;/li&gt;
&lt;li&gt;侵略罗马帝国的日耳曼民族；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于第一点，罗马人骁勇善战，建立了疆域辽阔的罗马帝国；古希腊人则聪明善
思，构建了描述世界的抽象语言。在诸多方面，古罗马人都心甘情愿卑躬屈膝的
向希腊人学习。罗马帝国混合着弄弄的希腊味儿。希腊哲学指示：答案应该简单，
符合逻辑能以数学表达。后来的牛顿，爱因斯坦再揭示宇宙规律时无不奉此为圭
臬。囿于当时条件，希腊人的很多灵感常常是错的，但是他们的这些方法论却一
直引导者人类探索自然奥秘。&lt;/p&gt;

&lt;p&gt;关于第二点，犹太人相信，宇宙间只有一个真神。这与古罗马和古希腊大相径庭。
后者崇拜多神，并且允许神有七情六欲，也会勾心斗角尔虞我诈。犹太人认为自
己是上帝的选民，所以这个唯一真神会对他们特别照顾。犹太教后来经由一个叫
保罗的人扩大成了今天的基督教，使得这个真神可以照顾除了犹太人以外的所有
人。当然，期间充满波折。&lt;/p&gt;

&lt;p&gt;关于第三点，日耳曼民族扮演了类似中国北方蒙古民族的角色，与公元476年消
灭了西罗马帝国（公元476之前的时期我们成为古典时期，这个名字是文艺复兴
时期的人们创造的）。不同于罗马帝国和犹太民族，日耳曼民族粗野不文，打
仗就是他们的日常。&lt;/p&gt;

&lt;p&gt;这三个元素之间竟然发生了联系，最开始罗马人要把犹太人赶尽杀绝，因为他们
不肯把君王当做神一样对待；转折点在公元313年，君士坦丁大帝成为一个基督
徒，四百年后，基督教成了罗马帝国唯一的宗教。罗马帝国变成了基督教的天下。
教会也变成了罗马人的教会。&lt;/p&gt;

&lt;p&gt;即使罗马帝国灭绝，教会依然幸存。罗马帝国变成了教会的罗马帝国。教皇和罗
马帝王平分秋色。&lt;/p&gt;

&lt;p&gt;日耳曼民族呢？他们根本无意治理国家，他们打仗只是为了生活，他们支持罗马
帝国和基督教会帮忙维护统治。所以一旦战胜，就采取封建制度，分封各个小的
城邦为王，政府就被架空了。从那时起，“并非所有的东西都归国王所有”这一思
想就生根发芽了。人民选举政府的动机只有一个，这个政府为人民服务（我是不
是写的有点多了 :) ）。并不是西方的政府权力必须有所限制，而是西方的政府
在一开始就没有什么权力，这是拜古典时期那些粗野的日耳曼民族所赐。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org71a2e15&#34;&gt;&lt;/a&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/life/20180219hybrideurope.png&#34; alt=&#34;Figure 1: 欧洲古典时期混合体&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: 欧洲古典时期混合体
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h3 id=&#34;1000年以后&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; 1000年以后&lt;/h3&gt;

&lt;p&gt;从西罗马帝国的灭亡（476年）到1400年，期间近一千年的历史被称为中世纪。
期间，日耳曼民族的战士变成了基督教骑士，基督教成员大肆抄写古希腊和古罗
马的学术支持《圣经》，那些修士和修女根本不晓得自己抄的是什么，就这样一
直抄了近千年。直到1400年，文艺复兴开始。&lt;/p&gt;

&lt;p&gt;文艺复兴，复兴的是古罗马和古希腊经典时期的“文艺”（公元476之前）。文艺
复兴时期的学者竭尽全力追寻经典时期的蛛丝马迹。这个时期的学者并不仇视基
督教抄写古罗马古希腊学术支撑《圣经》的行为。他们认为：宗教十个基本的存
在，大体而言无害，世界上还有许多值得关注的事情。&lt;/p&gt;

&lt;p&gt;由于教会是《圣经》的唯一官方解释机构。绝对的权利造就绝对的腐败。教会巧
取豪夺，骄奢淫逸却是耶稣教诲的解释者，这本来就充满讽刺。有个叫马丁路德
的人看不下去，把拉丁文写的《圣经》翻译成德语，人人都可阅读。随着马丁路
德的出逃，人们越来明白：基督教不是罗马人的宗教。&lt;/p&gt;

&lt;div class=&#34;alert-warning&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;“你只要相信耶稣基督就能得救，你不必做任何事就能得救，尤其不必对神父的指示言听计从，你只要相信上帝，抱持信仰就行了。”
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;“因信称义”是路德教派的中心教义。然而有更多的人发现，教会不是解释《圣经》
的唯一机构。马丁路德可以，我也可以。于是，各种新教百花齐放。&lt;/p&gt;

&lt;p&gt;继16世纪的宗教改革之后，17世纪发生了科学革命，牛顿的三大力学和达尔文的
生物进化论告诉人们：希腊人错了。自此，文艺复兴对古典的崇拜被打破。当然，
期间科学的宗教也发生了很多斗争。最后，科学的归科学，宗教的归宗教。17世
纪的科学革命直接导致了18世纪的启蒙运动。启蒙运动声势浩大，始于法国。启
蒙运动，推崇理性，相信进步。最终的结论是：宗教是迷信。然而启蒙运动掀起
的法国大革命并没有为万世开太平，反而带来了流血，暴政和独裁。于是，19世
纪浪漫主义开始，其崇尚感受，情绪以及所有强烈的情感，这与启蒙运动截然相
反。浪漫主义在德国最盛。浪漫主义呐喊自由解放，强调活的简单直接自在。当
然，浪漫主义也催生了民族主义，强调同一民族的应该建立国家，保持自己民族
的传统。&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orga06af4b&#34;&gt;&lt;/a&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/life/20180219after1000years.png&#34; alt=&#34;Figure 2: 19世纪的形态&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 2: 19世纪的形态
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;政治体制的演进&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; 政治体制的演进&lt;/h2&gt;

&lt;h3 id=&#34;东罗马帝国的灭亡&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; 东罗马帝国的灭亡&lt;/h3&gt;

&lt;p&gt;本书的下半部分是政治体制的演进，还有最后两章语言以及常民百姓的生活。继
续从公元476年说开来，那一年西罗马帝国灭亡，但是说希腊语的东罗马帝国依
然存在。在后来的一千年里，这个帝国遭受了来自日耳曼民族，穆斯林，维京人
和土耳其人的前后四次入侵，土耳其人于1453年攻陷君士坦丁堡，罗马灭亡。&lt;/p&gt;

&lt;p&gt;日耳曼民族和穆斯林的入侵都来自陆地，所以罗马人把藏有大量财宝的教堂建在
水边。维京人也是一个好战群体，他们用吃水甚浅的船作为武器，掠夺这些水边
的“大肥羊”如探囊取物。占领法国，占领英国，维京人受基督教的感化在欧洲建
礼家园，一切开始欣欣向荣。繁荣之后的欧洲，开始攻掠别人，十字军东征便是
开始。十字军东征的首要目标是把穆斯林赶回老家，夺回圣地耶路撒冷。1492年，
最后一批穆斯林被赶出西班牙南部。土耳其攻占君士坦丁堡之后，建立了奥斯曼
帝国，于第一次世界大战之后消失。&lt;/p&gt;

&lt;h3 id=&#34;民主意识发端于希腊&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; 民主意识发端于希腊&lt;/h3&gt;

&lt;p&gt;希腊人发明的政府是所有男性公民参与讨论，少数服从多数的投票表决。今天的
民主制度是代议式的民主，和雅典的民主大异其趣。现在的百姓并不是实时参与
政府运作，而是每三年或者四年投票一次。今天，由全民直接当家做主显得不大
可能。尽管互联网技术的发展使得直接参与政府运作在技术上变得可行，但是广
大群众的观点是很容易被煽动的，历史经验揭示由来自各个基层的少数精英参与
决策会显得更容易一些。希腊的三大哲学家苏格拉底，柏拉图和亚里士多德指出
人是善变无常的，优柔寡断的，浅薄无知的和容易被操作的，而政治是一门精细
的艺术，需要智慧和良好的判断，这不是每个公民都拥有的特质。&lt;/p&gt;

&lt;h3 id=&#34;共和体制的变态&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; 共和体制的变态&lt;/h3&gt;

&lt;p&gt;共和体制强调国家利益，认为国家利益高于私人恩怨情仇。罗马共和体制的创建
跟一个叫布鲁图斯的人息息相关，他刺杀了骄傲的塔克文，因为后者玷污了前者
的妻子。布鲁图斯发誓报仇并成功了。《鲁克丽丝失贞记》这幅名画记录了整个
过程。可以说，罗马共和整体的开启，是因为一位王子令人发指的罪行；是因为
一个谨遵古罗马美德，视名节比生命更重要的女人；是因为一个男人要为她复仇
的决心。&lt;/p&gt;

&lt;p&gt;共和体制的这种于国无私的美德导致布鲁图斯处决了自己的两个犯了错的儿子。
罗马共和体制持续了数百年，然后山头林立，走向分裂。凯撒，分裂山头的一员，
征服了其他人，其养子屋大维与公元前27年以奥古斯都称号，当上了罗马帝国的
第一任皇帝。三百年的太平岁月等来了第一波日耳曼蛮族入侵，罗马方面为了养
活军队，大肆苛捐杂税，民不聊生。313年君士坦丁大帝表态支持基督教，相信
基督能保护他和罗马帝国。他认为，只要支持基督教徒，他们的神就会恩赐与他。
但是这依然不能改变生灵涂炭的现状。公元476年西罗马帝国灭亡。随后城邦林
立，中世纪的社会形态形成。&lt;/p&gt;

&lt;h2 id=&#34;杂记&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; 杂记&lt;/h2&gt;

&lt;p&gt;这本小书适合急性子，强烈建议那些去欧洲旅游的游客看一看。踏进欧洲的博物
馆时，各个时期的珍贵文物才好对号入座。不然，别人一个“中世纪”，你就蒙圈
了。啊？中世纪？什么时候？&lt;/p&gt;

&lt;p&gt;之后可以再看《耶路撒冷三千年》和《罗马人的故事》。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>上帝掷骰子么?</title>
      <link>https://zcl.space/life/quantum-physics-gossip/</link>
      <pubDate>Mon, 19 Feb 2018 11:02:00 +0800</pubDate>
      
      <guid>https://zcl.space/life/quantum-physics-gossip/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#三次波粒世界大战&#34;&gt;三次波粒世界大战&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#第一次波粒世界大战&#34;&gt;第一次波粒世界大战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#第二次波粒世界大战&#34;&gt;第二次波粒世界大战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; &lt;a href=&#34;#第三次波粒世界大战&#34;&gt;第三次波粒世界大战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#杂记&#34;&gt;杂记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;

&lt;p&gt;很早的时候，在我的多看书架上，就有了这本书。今天得空，一睹为快。一直以
来我觉得一本书能不能让读者手不释卷，有一半的责任在作者。本书作者曹天元
出色的完成了自己的那一半。对于我这种有工科背景的读者，借助此书一窥量子
物理的发展史，这本书可以堪此大任。从可读性来讲，比霍金的《时间简史》读
起来更令人愉悦。读书，不愉悦，毋宁死。&lt;/p&gt;

&lt;p&gt;本文是这本书的阅读笔记。&lt;a href=&#34;https://www.evernote.com/shard/s250/sh/d2a0e433-65f5-42dc-9f9e-f32d40b4a93c/7cf47c27b606cb104ece49b8e413b6f1&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;是我的阅读书摘。&lt;/p&gt;

&lt;h2 id=&#34;三次波粒世界大战&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; 三次波粒世界大战&lt;/h2&gt;

&lt;p&gt;这本书最精彩的部分在波粒二象性的三次世界。关于光的本质，作者用其高超的
故事技能，娓娓道来300年的波粒战争史。三百年来，兴废存亡，朝代更迭，沧
海桑田。无数物理大家你方唱罢我登场，犹如在演绎量子物理精彩绝伦的舞台剧。&lt;/p&gt;

&lt;p&gt;全书从赫兹发现电磁波开始讲起，在讲述赫兹发现电磁波的实验过程中，作者提
了一笔：赫兹在实验报告中提及当他把铜缆线圈放到光照下时发现电火花出现的
更强烈。若非赫兹英年早逝，赫兹应该会同时发现光的波粒二象性。历史没有假
设，从那时起，关于光的本质引无数物理英雄尽折腰。&lt;/p&gt;

&lt;h3 id=&#34;第一次波粒世界大战&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; 第一次波粒世界大战&lt;/h3&gt;

&lt;p&gt;波动说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;格里马第的光衍射试验（有以太这个累赘）；&lt;/li&gt;
&lt;li&gt;胡克重复了格里马第的工作，断定光必定是某种快速的脉冲。撰写《显微术》
明确支持波动说。&lt;/li&gt;
&lt;li&gt;惠更斯继承胡克学说，认为光是一种在以太里传播的纵波。出版了著作《光
环》&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;微粒说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;牛顿光环。牛顿解释光色散试验说明光是由不同颜色的微粒构成。牛顿开始
还在波粒之间摇摆不定，后来跟胡克干上了，“赌气”似的一边倒支持微粒说。&lt;/li&gt;
&lt;li&gt;1665年，牛顿发现了牛顿环。&lt;/li&gt;
&lt;li&gt;1704年，牛顿发表煌煌巨著《光学》。把波的一些概念（如振动和周期）引
入微粒，巧妙的回答了牛顿环的问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;鉴于牛顿光环，波动学说一溃千里，微粒学说占尽风头。惠更斯去世，波动说群
龙无首，几乎丧失所有阵地。第一次波粒世界大战的结果是波粒说占据了物理学
界的主流，波动转入地下，开始了长达一个世纪的忍辱负重。&lt;/p&gt;

&lt;h3 id=&#34;第二次波粒世界大战&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; 第二次波粒世界大战&lt;/h3&gt;

&lt;p&gt;波动说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;托马斯杨的双缝干涉试验。用光的干涉效应解释牛顿环和衍射现象。发表
《自然哲学讲义》；&lt;/li&gt;
&lt;li&gt;菲涅尔提出了光是横波；严密的数学推理解释了光的衍射；在1818年论文大
奖赛上，当场打脸泊松。泊松提出按照菲涅尔的理论，在圆盘衍射实验中，
应该有个亮斑出现在阴影中间。菲涅尔的助手阿拉果坚持当场试验检测，结
果泊松被打脸。人们还命名这个亮斑为“泊松亮斑”，心疼泊松五秒钟。&lt;/li&gt;
&lt;li&gt;傅科测定光速。&lt;/li&gt;
&lt;li&gt;美的令人窒息的麦克斯韦方程组，统领整个电磁世界。击碎了微粒说的所有
幻想，预言光是一种电磁波，赫兹证明了这个预言。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;微粒说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;牛顿的粒子学说早已深入人心，这些人包括扩比奥，拉普拉斯和泊松；&lt;/li&gt;
&lt;li&gt;1809年马吕斯发现偏振现象和已有的波动学说相抵触；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第二次波粒世界大战以微粒学说惨败告终。物理学迎来了黄金时代。人们认为物
理学已经尽善尽美，后人只需要在这个架构上修修补补就可以去海边晒太阳了。
但是赫兹的那个实验中还有一个奇怪的现象：当有光照射到那个铜缆线圈的缺口
上时，似乎火花就出现的更容易一些。&lt;/p&gt;

&lt;h3 id=&#34;第三次波粒世界大战&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; 第三次波粒世界大战&lt;/h3&gt;

&lt;p&gt;两朵乌云开始出现在物理学大厦上空，随时引发狂风暴雨。这两朵乌云是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;迈克尔逊-莫雷试验中“以太”假设的存在与实验结果大相径庭；&lt;/li&gt;
&lt;li&gt;“黑体辐射实验和理论的不一致”；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;开尔文在一次演讲中提到了这两朵乌云，但是在场的所有人都没有意识到这两朵
乌云的意义。一场风暴就要来了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;第一朵乌云导致了相对论革命的爆发；&lt;/li&gt;
&lt;li&gt;第二朵乌云导致了量子论革命的爆发；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;波动说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;黑体辐射从类波的角度推导，就得到适用于长波的瑞利-金斯公式；&lt;/li&gt;
&lt;li&gt;麦克斯韦方程组；&lt;/li&gt;
&lt;li&gt;光的双缝干涉试验；&lt;/li&gt;
&lt;li&gt;泊松亮斑；&lt;/li&gt;
&lt;li&gt;德布罗意波的发现；&lt;/li&gt;
&lt;li&gt;薛定谔方程的发明；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;微粒说军团的弹药库里有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;黑体辐射从粒子的角度推导，就得到适用于短波的维恩公式；&lt;/li&gt;
&lt;li&gt;普朗克（量子物理奠基人）打开了潘多拉盒子，普朗克黑体公式适合所有波
长。普朗克认为： &lt;strong&gt;必须假定能量在发射和吸收的时候，不是连续不断的而是
分成一份一份的&lt;/strong&gt; 。开启了全新的物理学研究&lt;/li&gt;
&lt;li&gt;1905年，爱因斯坦发现光电效应 \(E=hv\)，提出光子概念；&lt;/li&gt;
&lt;li&gt;康普顿效应，发现x射线是一种量子现象。上帝制造了光，爱因斯坦指出什么
是光，康普顿看到了光；&lt;/li&gt;
&lt;li&gt;海森堡的矩阵力学；狄拉克推进了数学表达；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第三次波粒世界大战引发了量子革命，光的波粒二象性被发现。波尔到了卢瑟福
开的诺贝尔幼儿园之后就一发不可收拾，创建了哥本哈根学派，并一直统领量子
物理的研究。不确定原理被发现，人们试图创建一个大一统的理论去描述这个世
界。&lt;/p&gt;

&lt;p&gt;虽然光的波粒二象性被发现，但是关于如何认识解释二象性，如何认识世界，诸
多物理学家还在苦苦的解释；目前针对物理世界的解释出现了众多纷繁的观点最
有名的是哥本哈根解释和多世界解释。在此就不再展开了。&lt;/p&gt;

&lt;h2 id=&#34;杂记&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; 杂记&lt;/h2&gt;

&lt;p&gt;看到知乎上有人评价说曹天元写了《量子物理史话》之后应该再接再厉。去做传
媒和理财规划完全是浪费人才。这绝对不会是我的留言风格。我尊重别人的选择，
并认为自己无权过问和评论别人的选择。与我而言，感受到的只是读书时的畅快
淋漓和击节而叹。余光中老先生说得对，你只需要知道鸡蛋好吃，何必在意那只
下蛋的母鸡长什么样？同样，我也不会去评论余光中的生活和为人，我只知道他
的诗文简直帅到极点。&lt;/p&gt;

&lt;p&gt;扯得有点远了，还是那句话：读书，不愉悦，毋宁死。《量子物理史话》，读起
来令人愉悦。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organize you life in Emacs Org</title>
      <link>https://zcl.space/tools/organize-you-life-in-org/</link>
      <pubDate>Sun, 11 Feb 2018 21:52:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/organize-you-life-in-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#my-gtd-workflow&#34;&gt;My GTD workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#some-preparations&#34;&gt;some preparations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#set-the-agenda-file&#34;&gt;set the agenda file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#set-the-refile-targets&#34;&gt;set the refile targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#set-the-org-capture-templates&#34;&gt;set the org capture templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; &lt;a href=&#34;#set-the-org-agenda-custom-commands&#34;&gt;set the org agenda custom commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#one-day-based-on-my-workflow&#34;&gt;One day based on my workflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; &lt;a href=&#34;#punch-in&#34;&gt;Punch In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; &lt;a href=&#34;#check-out-the-agenda&#34;&gt;check out the agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; &lt;a href=&#34;#focus-on-certain-project&#34;&gt;focus on certain project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; &lt;a href=&#34;#change-the-state-of-one-task&#34;&gt;change the state of one task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; &lt;a href=&#34;#using-the-mobile-phone-to-take-capture&#34;&gt;using the mobile phone to take capture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#conclusion&#34;&gt;conclusion&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; introduction&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&#34;http://spacemacs.org/&#34; target=&#34;_blank&#34;&gt;spacemacs&lt;/a&gt; I divide my Org config into servel private layers for
the sake of easy maintenance and flexibility. You can check my
&lt;a href=&#34;https://github.com/emacsun/.spacemacs.d&#34; target=&#34;_blank&#34;&gt;.spacemacs.d&lt;/a&gt; on github. I suggest you excerpt some of my config
instead of copying all of them because some of them maybe not what you
want.&lt;/p&gt;

&lt;p&gt;Based on the comprehensive tutorial &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt;,
I build my own GTD system using Org. Actually, there exists quite a
few posts on building personal GTD system through Emacs Org. Some
excellent ones are listed as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; . This article is the starting
point of my serious using of Emacs Org as GTD tool. It is quite
long, but deserves spending time to read it. It pays off.
Furthermore, reading just one time is not enough. Perhaps you
will visit this post several times before your GTD system is
handy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/&#34; target=&#34;_blank&#34;&gt;Using org-mode as a Day Planner&lt;/a&gt; . This article describe how the
author replace pen-and-paper day planner with the Emacs Org.
After trying many software available, the author choose Emacs
Org.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html&#34; target=&#34;_blank&#34;&gt;How I use Emacs and Org-mode to implement GTD&lt;/a&gt; . The author&amp;rsquo;s job
is developing classroom training materials and E-Learning
solutions for a software company based in North Sydney. It&amp;rsquo;s
also worthwhile to give the article a shot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am not interested in listing all the articles. What I want to say
is that you need to define your need first. After that you can
excerpt the config from other&amp;rsquo;s implement. Most of the time you
will modify other&amp;rsquo;s config before Org is handy for you. So some
knowledge of Elisp is desirable.&lt;/p&gt;

&lt;h2 id=&#34;my-gtd-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; My GTD workflow&lt;/h2&gt;

&lt;p&gt;First let me introduce my GTD workflow. In general, a task in my GTD
workflow will go the road shown as below whick is the same as show in
&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; but with different triggering
conditions:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6e81c32&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210myworkflow.png&#34; alt=&#34;Figure 1: state transitions for a task in my workflow&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: state transitions for a task in my workflow
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The main features are listed below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every moment, for the sake of clearing my head, I capture all the
ideas or some todos jumping into my head during my handling one
event. I will handle the capture later.&lt;/li&gt;
&lt;li&gt;Every morning, I check the my agenda which is generated by a
combination of ten commends.&lt;/li&gt;
&lt;li&gt;I check the scheduled tasks and the tasks which is near the
deadline.&lt;/li&gt;
&lt;li&gt;After the scheduled one and the deadlined one, I take a &lt;code&gt;NEXT&lt;/code&gt;
task, which is in &lt;code&gt;NEXT&lt;/code&gt; status. Also, I start a clock under such
task.&lt;/li&gt;
&lt;li&gt;After finishing the &lt;code&gt;NEXT&lt;/code&gt; tasks, the &lt;code&gt;NEXT&lt;/code&gt; status will be changed
to &lt;code&gt;DONE&lt;/code&gt; automatically. Then I pick a new task in the &lt;code&gt;TODO&lt;/code&gt; lists
and change the &lt;code&gt;TODO&lt;/code&gt; status into &lt;code&gt;NEXT&lt;/code&gt;. Everytime I change a
&lt;code&gt;TODO&lt;/code&gt;  task into a &lt;code&gt;NEXT&lt;/code&gt; task, clock is running under that task
automatically.&lt;/li&gt;
&lt;li&gt;After finishing all the &lt;code&gt;TODO&lt;/code&gt; tasks, I check the &lt;code&gt;DONE&lt;/code&gt; list to see
if there is any tasks need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;some-preparations&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; some preparations&lt;/h2&gt;

&lt;p&gt;In order to run the GTD, some preparations are needed.&lt;/p&gt;

&lt;h3 id=&#34;set-the-agenda-file&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; set the agenda file&lt;/h3&gt;

&lt;p&gt;To use Org as a GTD tool, the first thing is to setup the
&lt;code&gt;org-agenda-files&lt;/code&gt; ;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;set up the agenda files
(setq org-agenda-files (list &amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I put my configs into the Dropbox directory, so that
my config will never lose even if I delete them from the local
carelessly.&lt;/p&gt;

&lt;p&gt;Notice that there is a file named &amp;ldquo;zrefile.org&amp;rdquo; which is the entrance
of all my todos and some other captures. It plays as an inbox.
Everytime I check this file and take actions to clean it. All this can
be done in the agenda buffer, which I will explain later. To refile
the items in the refile.org, I need to set up the refile targets.&lt;/p&gt;

&lt;h3 id=&#34;set-the-refile-targets&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; set the refile targets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-refile-targets (quote (
          (&amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; :maxlevel . 6))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, besides the zwork.org and zlife.org which are the agenda
files, there are other five org files. These five org files are for my
personal blog. Sometime, I capture a draft or outline of a new post in
the zrefile.org, so I need to refile these drafts into the right
category.&lt;/p&gt;

&lt;p&gt;To understand why I add these extra five org files as the refile
targets, you need to see my &lt;code&gt;org-capture-templates&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-capture-templates&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; set the org capture templates&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39;(
        (&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;h&amp;quot; &amp;quot;Hugo post&amp;quot;)
        (&amp;quot;hm&amp;quot; &amp;quot;Math&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; &amp;quot;Math&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         &amp;quot;:math:&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;hc&amp;quot; &amp;quot;Computer&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; &amp;quot;Computer&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ht&amp;quot; &amp;quot;Telecommunication&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; &amp;quot;Telecommunication&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;Life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ho&amp;quot; &amp;quot;Tools&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; &amp;quot;Tools&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hm&amp;quot; &amp;quot;movie&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Movie&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
         (&amp;quot;l&amp;quot; &amp;quot;my Log Time&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot; ) &amp;quot;** %T - %?  :timelog:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;d&amp;quot; &amp;quot;diary&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot; ) &amp;quot;* %t - %?  :diary:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;x&amp;quot; &amp;quot;org-protocol&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO Review %c \n Added:%T\n&amp;quot;)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have a template for &lt;code&gt;zrefile.org&lt;/code&gt; which is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
 &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
 :clock-in t :clock-resume t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand the meaning of this template, you need to read the doc
for variable &lt;code&gt;org-capture-templates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;whenever I check the org-agenda, I will see a block contains all the
need-to-refile tasks. So you may curious about my set of
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-agenda-custom-commands&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; set the org agenda custom commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-agenda-custom-commands
        (quote (
                (&amp;quot; &amp;quot; &amp;quot;Agenda&amp;quot;
                 ((agenda &amp;quot;&amp;quot; )
                  (tags &amp;quot;NOTES&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;NOTES to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags &amp;quot;REFILE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo &amp;quot;-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Stuck Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-HOLD-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-CANCELLED/!NEXT&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Project NEXT Tasks&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down todo-state-down effort-up category-keep))))
                  (todo &amp;quot;TODO&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks TODO&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  (todo &amp;quot;DONE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks DONE&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  ;;;;(tags-todo &amp;quot;-CANCELLED+WAITING+HOLD/!&amp;quot;
                  (todo &amp;quot;HOLD&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Waiting and Postponed Tasks&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-stuck-projects)
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-todo-ignore-scheduled &#39;future)
                         (org-agenda-todo-ignore-deadlines &#39;future)))
                  (tags &amp;quot;-REFILE/&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Archive&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should never copy the above snippet, because there are some
functions whose definitions are not contained in the snippet.
Actually, you should go to my Github page to get the repository if you
are interested in my .spacemacs.d&lt;/p&gt;

&lt;p&gt;According to the command, one of the sample of my org agenda may look
like:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb6363e7&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda.png&#34; alt=&#34;Figure 2: my org agenda sample&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 2: my org agenda sample
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I have three projects: math,computer and communication
(telecommunication). For each projects, there are some tasks. All the
projects appear as level-1 headlines in the org file and the tasks
appear as sub-level headlines. If all the tasks under one project are
in &lt;code&gt;TODO&lt;/code&gt; state, the project is stuck. If at least one of the task
under one project is in &lt;code&gt;NEXT&lt;/code&gt; state, the project is running.&lt;/p&gt;

&lt;p&gt;I think the structure of my agenda buffer is straightforward. you can
define your own &lt;code&gt;org-agenda-custom-commands&lt;/code&gt; by reading the manual and
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;one-day-based-on-my-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; One day based on my workflow&lt;/h2&gt;

&lt;h3 id=&#34;punch-in&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; Punch In&lt;/h3&gt;

&lt;p&gt;At the beginning of every day, I use &lt;code&gt;F8 I&lt;/code&gt; to punch in, which starts
a clock under a task called Organization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defvar bh/organization-task-id &amp;quot;eb155a82-92b2-4f25-a3c6-0304591af2f9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-out-the-agenda&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; check out the agenda&lt;/h3&gt;

&lt;p&gt;Check out the agenda, using &lt;code&gt;org-agenda&lt;/code&gt; which is bound to &lt;code&gt;SPC a o o
SPC&lt;/code&gt; or &lt;code&gt;SPC o a SPC&lt;/code&gt; or &lt;code&gt;F5 SPC&lt;/code&gt; . Because the &lt;code&gt;org-agenda&lt;/code&gt; buffer
will be visited quite a few times, I bind this command to several
shortcuts. Using the customed command &lt;code&gt;SPC&lt;/code&gt; , I collect all the
projects,  tasks with &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;NEXT&lt;/code&gt; states in the project which
give me an overview of what should be done next and what should be
started next.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb1042c6&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda2.png&#34; alt=&#34;Figure 3: my org agenda overview&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 3: my org agenda overview
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As we can see from the screenshot, the agenda of today is listed at
the beginning with scheduled task and deadline task.&lt;/p&gt;

&lt;p&gt;Following today&amp;rsquo;s agenda, several blocks are displayed with each
headline in green color and large font size. Those blocks shows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Notes to Refile&lt;/strong&gt;, which is the draft of a post which should be
refile to math.org computer.org or telecommunication.org.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Refile&lt;/strong&gt;, which is the Ideas or tasks hitting my head
during handling one tasks. I store these tasks in zrefile.org then
process them later after finishing current tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stuck Projects&lt;/strong&gt;, which are the projects have no sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projects&lt;/strong&gt;, which are the projects have at least one sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Next Tasks&lt;/strong&gt;, which are &lt;code&gt;NEXT&lt;/code&gt; sub-tasks in all Projects.
In particular, you can filter out the &lt;code&gt;NEXT&lt;/code&gt; tasks belonging to
certain project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks TODO&lt;/strong&gt;, which are all the &lt;code&gt;TODO&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks DONE&lt;/strong&gt;, which are all the &lt;code&gt;DONE&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waiting and Postponed Tasks&lt;/strong&gt;, which are all the tasks in &lt;code&gt;WAITING&lt;/code&gt;
and &lt;code&gt;HOLD&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Archive&lt;/strong&gt;, which are the tasks being tagged as &lt;code&gt;DONE&lt;/code&gt; for
a period and need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;focus-on-certain-project&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; focus on certain project&lt;/h3&gt;

&lt;p&gt;If you have many &lt;code&gt;TODO&lt;/code&gt; tasks, it is desirable to focus on certain
project at one time. Just move the cursor on the Project you want to
focus, then press &lt;code&gt;^&lt;/code&gt; . If you want to focus on another project, press
&lt;code&gt;^&lt;/code&gt; again then select another project, press &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org88f3fa1&#34;&gt;&lt;/a&gt;

&lt;figure&gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda3.png&#34; alt=&#34;Figure 4: focus on certain project&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 4: focus on certain project
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Actually, there are quite a few commands helping you coin your own
view of the agenda buffer. some handy are listed below:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org2b4b0ac&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  some handy agenda commands
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;shortcuts&lt;/th&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-tag&lt;/td&gt;
&lt;td&gt;Filter the agenda view with respect to a tag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-category&lt;/td&gt;
&lt;td&gt;Filter the current agenda view with respect to the category of the item at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-top-headline&lt;/td&gt;
&lt;td&gt;Filter the current agenda view and only display the siblings and the parent headline of the one at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-regexp&lt;/td&gt;
&lt;td&gt;Filter the agenda view by a regular expression&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-effort&lt;/td&gt;
&lt;td&gt;filter the agenda view with respect to effort estimates&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can find more agenda commands by reading &lt;code&gt;Agenda views&lt;/code&gt; part of
the Org manual which is built in the Emacs.&lt;/p&gt;

&lt;h3 id=&#34;change-the-state-of-one-task&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; change the state of one task&lt;/h3&gt;

&lt;p&gt;It is quite easy to change the state of one task. By default, the
state is in &lt;code&gt;TODO&lt;/code&gt; state. After start clocking the task, the task will
be in &lt;code&gt;NEXT&lt;/code&gt; state automatically.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;NEXT&lt;/code&gt; to other state, you just use &lt;code&gt;C-c C-t&lt;/code&gt; . If you are in the
org agenda buffer, press &lt;code&gt;t&lt;/code&gt; one the line of the task.&lt;/p&gt;

&lt;p&gt;Once the task is set as &lt;code&gt;DONE&lt;/code&gt; , a temporary buffer will jump out and
let you take some note to record the task.&lt;/p&gt;

&lt;h3 id=&#34;using-the-mobile-phone-to-take-capture&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; using the mobile phone to take capture&lt;/h3&gt;

&lt;p&gt;In general, there are two app one is &lt;code&gt;Org-mobile&lt;/code&gt; and the another one
is &lt;code&gt;BeOrg&lt;/code&gt;. I prefer to the later because of is easy to use. All you
have to do is put your agenda files in a Dropbox directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Org-mobile&lt;/code&gt; is kind of complex, and need to config both on the phone
and the PC. I finally make it run on both my iPhone and Surface pro 4.
However, I resort to &lt;code&gt;BeOrg&lt;/code&gt; because you will never forget how to use
&lt;code&gt;BeOrg&lt;/code&gt; . Unfortunately, I forget how to use &lt;code&gt;Org-mobile&lt;/code&gt; after I did
not use it for a month.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; conclusion&lt;/h2&gt;

&lt;p&gt;My GTD workflow based on Org is summarized. To be honest, I change my
workflow quite often. So the configuration will change subsequently
which is the source of joy using Emacs. You can always config it as
handy as possible.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
