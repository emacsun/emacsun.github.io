#+TITLE:  群的定义
#+AUTHOR:    zcl.space
#+EMAIL:     emacsun@163.com
#+DATE:
#+DESCRIPTION:  本文是学习Algebra第二章第一节的一些总结
#+KEYWORDS:  Algebra
#+CATEGORIES: math
#+SETUPFILE: ~/.emacs.d/org-templates/math-level2.org
#+HTML_HEAD_EXTRA: <a id="pdf" href="A0201group.pdf"><img src="../../img/assets/pdf.png"></a>
#+OPTIONS:  num:t toc:t

群是最重要的代数概念之一。在信道编码领域有着广泛的应用，Lin Shu的《差错控制编码》一书第二章代数引论的第一个概念就是群。另外两个重要的概念是环和域。学习代数，不可避免会涉及群环域。基本上这些概念都基于集合，不同的是在集合上定义的运算法则。对于群，是在集合中定义了一个合成法则（也可以叫做运算法则），使得每一个元素都有逆。当然这不是严肃的定义，一下子抛出来严肃的定义显得太不人性，我们看几个例子：非零实数（关于实数系的存在和构建，请参考分析学的书籍）集合构成一个群\(\mathbb{R}^{\times}\)，而所有实数集合关于加法构成一个群\(\mathbb{R}^{+}\)。另一个非常重要的例子是可逆\(n\times n\)矩阵的集合，我们称其为一般线性群，其合成法则是矩阵乘法。

集合\(\mathcal{S}\)上的一个合成法则，是指\(\mathcal{S}\)的一对元素\(a,b\)经过某种映射得到\(\mathcal{S}\)中的另一个元素\(c\)的运算准则。我们从小学的时候就接触的实数加法和实数乘法是最原始的合成法则。我们还可以把合成法则看成是\(\mathcal{S}\)上两个变量的函数。所以，对于合成法则我们可以用函数的方式写出\(c = f(a,b)\)。当然，用函数的形式来表达显得不简洁，我们可以是用类似加号和乘号来表示。第一次接触代数的时候，我觉得之前学习的数学太小儿科，太不够高观。高中之前的代数处理的是集合中元素的关系，比如实数系中的实数之间的关系。而大学之后的代数更多的从集合的角度探讨问题，给人更高的视野。

现在我们看两个合成法则。如果对于所有\(\mathcal{S}\)中的元素\(a,b,c\)，满足\[(ab)c = a(bc)\]则称之为结合的（associative law）。如果对于所有\(\mathcal{S}\)中的元素\(a,b\)，满足 \[ab = ba\]则称之为交换的（commutative law）.矩阵乘法的例子是结合的但不是交换的。我们认为结合律比交换律更基础，因为函数的合成是满足结合律的。设\(\mathcal{T}\)是集合。\(g,f\)是\(\mathcal{T}\)到\(\mathcal{T}\)的映射。令\(g\cdot f\)表示合成映射\(t\maps to g(f(t))\)。


