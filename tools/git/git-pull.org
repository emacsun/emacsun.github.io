#+TITLE: Git pull 使用
#+AUTHOR:    emacsun
#+EMAIL:     emacsun@163.com
#+DATE:      
#+DESCRIPTION:  
#+KEYWORDS:  
#+CATEGORIES: 
#+SETUPFILE: ~/.emacs.d/org-templates/emacs-level2.org
#+HTML_HEAD_EXTRA: <a id="pdf"  href="./git-pull.pdf"><img src="../../img/assets/pdf.png"></a>
#+LaTeX_CLASS: cn-article
#+options: toc:nil


Github支持协作代码开发管理,会经常遇到需要更新别人的代码或者在不同的电脑上更新自己的代码。那么使用git pull命令即可更新代码。git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。git pull 可以接受很多参数，本文总结一些常见的用法。


* 直接从远程主分之更新代码
  [2017-04-16 Sun 12:45]

#+begin_example
git pull
#+end_example

以上相当于 =git pull origin master=

* 指定更新的分支
  [2017-04-16 Sun 12:46]

#+begin_example
git pull forkName branchName
#+end_example

从 =forkName= 更新  =branchName= 。 具体来讲：
#+begin_example
git pull <远程主机名>  <远程分支名>:<本地分知名>
#+end_example

例如
#+begin_example
git pull origin next:master
#+end_example

取回 =origin= 主机的 =next= 分支，并与 =master= 合并。上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。
#+begin_example
git fetch origin 
git merge origin/master
#+end_example

在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。

Git也允许手动建立追踪关系。
#+begin_example
git branch --set-upstream master origin/next
#+end_example

 上面命令指定master分支追踪origin/next分支。

如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
#+begin_example
git pull origin
#+end_example

上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。

如果当前分支只有一个追踪分支，连远程主机名都可以省略。即
#+begin_example
git pull
#+end_example

这与第一节的 =git pull= 不谋而合。
