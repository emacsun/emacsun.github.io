<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on ZCL.SPACE</title>
    <link>https://zcl.space/tools/</link>
    <description>Recent content in Tools on ZCL.SPACE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 ZCL</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/tools/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Take a Diary Using Emacs Org</title>
      <link>https://zcl.space/tools/take-a-diary-using-emacs-org/</link>
      <pubDate>Wed, 21 Feb 2018 09:03:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/take-a-diary-using-emacs-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#set-up&#34;&gt;Set up&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;There is one diary system built in Emacs. When you are in the
Calendar buffer, press &lt;code&gt;i&lt;/code&gt; will bring you a menu to select what
kind of diary you want to take. However, as a loyal fan of Emacs
Org, I want to take diary using Org. When I am in the org agenda
buffer, press &lt;code&gt;i&lt;/code&gt; will bring me a menu like what show in the
calendar buffer after pressing &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;set-up&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Set up&lt;/h2&gt;

&lt;p&gt;It seems that all you need to do is set the
  &lt;code&gt;org-agenda-diary-file&lt;/code&gt;, so that Org knows where to put the
  diary file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-agenda-diary-file  &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Journal your life Using Emacs Org</title>
      <link>https://zcl.space/tools/journal-your-life-using-emacs-org/</link>
      <pubDate>Tue, 20 Feb 2018 22:21:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/journal-your-life-using-emacs-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#keys&#34;&gt;Keys&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#global-bindings&#34;&gt;Global Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#major-mode-bindings&#34;&gt;Major Mode Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#calendar-mode-bindings&#34;&gt;Calendar Mode Bindings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#after-a-period&#34;&gt;After a Period&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2018-02-21 Wed 07:48]&lt;/span&gt;&lt;/span&gt;
Long time ago, I read a post about &lt;a href=&#34;https://www.emacswiki.org/emacs/PersonalDiary&#34; target=&#34;_blank&#34;&gt;taking daily journal using Emacs&lt;/a&gt;.
Until recently, I realized that I need to take journals on my work.
So I read the post again and integrate the configuration into my
.spacemacs.d.&lt;/p&gt;

&lt;p&gt;Here, I am not going to preach why you should keep a daily
journal. Google will tell you more.&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Install&lt;/h2&gt;

&lt;p&gt;If you want to Install the org-journal layer, just clone my
&lt;a href=&#34;https://github.com/emacsun/.spacemacs.d&#34; target=&#34;_blank&#34;&gt;.spacemacs.d&lt;/a&gt; there is a layer named &lt;code&gt;zcljournal&lt;/code&gt;, which is forked
from &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal&#34; target=&#34;_blank&#34;&gt;spacemacs-journal&lt;/a&gt; with a little modified.&lt;/p&gt;

&lt;p&gt;To use this journal system, you need set &lt;code&gt;org-journal-dir&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-journal-dir &amp;quot;~/.spacemacs.d/journal/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keys&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Keys&lt;/h2&gt;

&lt;h3 id=&#34;global-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; Global Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view journal of today&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search journals within a specified time interval&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC a j S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search all journal for a string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;major-mode-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; Major Mode Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;next journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;previous journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search the current journal file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;read journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;display journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search all journals&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar week&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar month&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPC m j y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search calendar year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also, you can replace the prefix &lt;code&gt;SPC m&lt;/code&gt; with &lt;code&gt;,&lt;/code&gt; which is more
handy.&lt;/p&gt;

&lt;h3 id=&#34;calendar-mode-bindings&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; Calendar Mode Bindings&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key Binding&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new journal entry&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view an entry in a new buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;view an entry but do not switch to it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;go to next day with journal entries&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;go to previous day with journal entries&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of all time&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current week&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current month&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search in all entries of the current year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;after-a-period&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; After a Period&lt;/h2&gt;

&lt;p&gt;After a Period, say a month, there are quite a lot journals under
the &lt;code&gt;org-journal-dir&lt;/code&gt; . One day One journal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version Control Using Magit in Spacemacs</title>
      <link>https://zcl.space/tools/version-control-emacs-magit/</link>
      <pubDate>Tue, 20 Feb 2018 22:14:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/version-control-emacs-magit/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#commit-your-changes&#34;&gt;Commit Your Changes&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is an &lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;official layer&lt;/a&gt; called &lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;builtin spacemacs. The &lt;code&gt;git&lt;/code&gt;
layer is based on &lt;code&gt;magit&lt;/code&gt; . Actually, on the magit website, you can
always find what you want. This post is a summary of How I use magit
in spacemacs.&lt;/p&gt;

&lt;p&gt;I like the magit website because of the beautiful font and pleasing
color combination. More important is the maintainor Jonas Bernoulli
who devotes his yearly efforts to coin the magit great for Emacsers.
Now, after &lt;a href=&#34;https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client/posts/1988383&#34; target=&#34;_blank&#34;&gt;a successful campaign on the Kickstarter&lt;/a&gt;, Jonas Bernoulli
was able to work on Magit full-time for another year, which was he&amp;rsquo;d
love to.&lt;/p&gt;

&lt;p&gt;Lets&amp;rsquo;s goto my daily use of Magit in Spacemacs. If you are not using
&lt;a href=&#34;http://spacemacs.org/layers/+source-control/git/README.html&#34; target=&#34;_blank&#34;&gt;Spacemacs&lt;/a&gt;, I highly recommend it for you.&lt;/p&gt;

&lt;h2 id=&#34;commit-your-changes&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Commit Your Changes&lt;/h2&gt;

&lt;p&gt;Suppose you have already make some changes on a project version
controlled using Git, the next step is to stage the changes and then
commit the changes.&lt;/p&gt;

&lt;p&gt;If your cursor are in the buffer of a file belonging to that project,
press &lt;code&gt;SPC g s&lt;/code&gt; will bring you to the magit buffer of current project.&lt;/p&gt;

&lt;p&gt;If your cursor are not in the buffer of a file belongint to that
project, using &lt;code&gt;SPC p p&lt;/code&gt; goto the helm-projectile buffer, then move
cursor to the project, then press &lt;code&gt;M-g&lt;/code&gt;, you will goto the magit
buffer of current project.&lt;/p&gt;

&lt;p&gt;Taking my &lt;code&gt;.spacemacs.d&lt;/code&gt; project for example, after some modifications
on the config, I want to commit the changes. The mentioned two ways
bring me to a magit buffer like this:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org5295721&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer1.png&#34; alt=&#34;Figure 1: magit buffer of my .spacemacs.d&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: magit buffer of my .spacemacs.d
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;From the above buffer, it records that I have one untracted file and
two unstaged changes on two existing files. On the headlines of the
untracted files and unstaged changes, press &lt;code&gt;s&lt;/code&gt; will stage all the
untracted files and unstaged changes. If you are not at the headlines,
to stage all the changes you need to press &lt;code&gt;S&lt;/code&gt;. After this, the buffer
become:&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&#34;org0ea80ea&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer2.png&#34; alt=&#34;20180219magitbuffer2.png&#34; width=&#34;400&#34; align=&#34;center&#34; /&gt;
If you regret, press &lt;code&gt;u&lt;/code&gt; to unstage the changes. If you want to
commit, just press &lt;code&gt;c&lt;/code&gt;, you will get a menu.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgd124ad0&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer3.png&#34; alt=&#34;Figure 3: press `c`  to commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 3: press `c`  to commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The menu is clear for you to choose. If nothing to change, just press
&lt;code&gt;c&lt;/code&gt; again, and there will a buffer pop up for you to take some notes
on this commit. Also, there is a buffer showing the diff of this
commit. If you regret at this moment, just press &lt;code&gt;C-c C-k&lt;/code&gt; to abort
the commit.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org9fdf700&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer4.png&#34; alt=&#34;Figure 4: press `c` to commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 4: press `c` to commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After finishing the notes, press &lt;code&gt;C-c C-c&lt;/code&gt; to finish the commit. you
are in a buffer showing the current state of the project.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6d0c626&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer5.png&#34; alt=&#34;Figure 5: after commit&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 5: after commit
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;It shows that I am ahead one commit of the remote/master. So, If you
want to push the commit to the remote/master, press &lt;code&gt;p&lt;/code&gt; , a buffer
will popup for you to choose where to push.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org25db75a&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer6.png&#34; alt=&#34;Figure 6: press `u`  to push&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 6: press `u`  to push
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;u&lt;/code&gt; to push the commit to the origin/master, and you get:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org34e0b94&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180219magitbuffer7.png&#34; alt=&#34;Figure 7: after pushing to the origin/master&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 7: after pushing to the origin/master
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Then a commit is finished locally and remotely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write in Emacs</title>
      <link>https://zcl.space/tools/write-in-emacs/</link>
      <pubDate>Tue, 20 Feb 2018 22:13:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/write-in-emacs/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#writing-a-book-in-emacs&#34;&gt;writing a book in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#extensions-that-facilitate-writing&#34;&gt;Extensions that facilitate writing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#working-environment&#34;&gt;Working Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; &lt;a href=&#34;#org&#34;&gt;Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; &lt;a href=&#34;#spell-checking&#34;&gt;Spell Checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.4&lt;/span&gt; &lt;a href=&#34;#moving-around&#34;&gt;Moving around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.5&lt;/span&gt; &lt;a href=&#34;#count-words&#34;&gt;count words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#reference&#34;&gt;Reference&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;writing-a-book-in-emacs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; writing a book in Emacs&lt;/h2&gt;

&lt;p&gt;I am not going to preach the powerful tool, Org. In this post, I want
to write something on the tools which facilitate the literature
writing. Indeed, if I am going to write a book someday (when time is
not a problem), the very tool I will adopt definitely is Emacs.&lt;/p&gt;

&lt;p&gt;With high probability, I will adopt the &lt;a href=&#34;https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs&#34; target=&#34;_blank&#34;&gt;workflow like Mickey Petersen
did&lt;/a&gt;. Also, Emacs has many extensions that make writing a book or an
article in large size possible. In general, I will write it in Org
mode, and export the book to other format with just a &lt;code&gt;C-c C-e&lt;/code&gt;, which
is a convenient shortcut memorized by my muscle.&lt;/p&gt;

&lt;h2 id=&#34;extensions-that-facilitate-writing&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Extensions that facilitate writing&lt;/h2&gt;

&lt;h3 id=&#34;working-environment&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; Working Environment&lt;/h3&gt;

&lt;p&gt;My working Environment is listed as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows 10 on Surface Pro 4;&lt;/li&gt;
&lt;li&gt;Emacs 25.0.5;&lt;/li&gt;
&lt;li&gt;Org 9.1.6;&lt;/li&gt;
&lt;li&gt;Also, I use spacemacs, a comprehensive configuration with many
functions organized as layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;org&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Org&lt;/h3&gt;

&lt;p&gt;The Org mode, the killer extension, makes Emacs great again. I surely
did quite a few customization on Org. However, I use the org layer
shipped with spacemacs.&lt;/p&gt;

&lt;p&gt;Also, you can &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html&#34; target=&#34;_blank&#34;&gt;configure Org like a word processor&lt;/a&gt;. Org-bullet package
make Org mode beautiful. I set Org bullets as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-bullets-bullet-list &#39;(&amp;quot;✿&amp;quot; &amp;quot;❀&amp;quot; &amp;quot;♣&amp;quot; &amp;quot;♧&amp;quot; ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned before, you can export your Org file using several
formats such as HTML,TeX, PDF, Markdown and so on.&lt;/p&gt;

&lt;p&gt;I use Org writing my own blog through &lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;. Of course, I use Hugo.
Why not? Hugo is fast and disk-space-friend. Hugo also has its windows
distribution. ox-hugo export the org files as markdown files which are
supported by hugo.&lt;/p&gt;

&lt;p&gt;I use Org to export PDF based on the latex class defined &lt;a href=&#34;https://github.com/emacsun/org-article&#34; target=&#34;_blank&#34;&gt;org-article&lt;/a&gt;
,which is a latex class I forked from &lt;a href=&#34;https://github.com/tsdye/org-article&#34; target=&#34;_blank&#34;&gt;tsdye/org-article&lt;/a&gt; and added the
support for Chinese characters. Org-article is a flexible latex class
and export beautiful PDF with the good-looking fonts and architecture.&lt;/p&gt;

&lt;h3 id=&#34;spell-checking&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.3&lt;/span&gt; Spell Checking&lt;/h3&gt;

&lt;p&gt;Using flyspell, spell checking is easy. There is a layer named
spell-checking distributed with spacemacs.&lt;/p&gt;

&lt;p&gt;I use aspell instead of ispell. So, I set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default ispell-program-name &amp;quot;C:/Aspell/bin/aspell.exe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you have to install aspell and the dictionaries. I use the
&lt;a href=&#34;http://aspell.net/win32/&#34; target=&#34;_blank&#34;&gt;Win32 version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using flyspell mode, you can also insert some word into your personal
dictionary.&lt;/p&gt;

&lt;h3 id=&#34;moving-around&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.4&lt;/span&gt; Moving around&lt;/h3&gt;

&lt;p&gt;Using Spacemacs, moving around is easy because it has almost all the
jumping shortcuts used in Vim (if you use the Vim mode in spacemacs).&lt;/p&gt;

&lt;p&gt;On the other hand, using Org, you can jump from headline to headline
easily. Promoting and demoting a headline is also fast. You can even
change the head level of a headline using just a few keystrokes.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tab&lt;/code&gt; key is a useful shortcut to change the face of how the Org
buffer looks like. I use the &lt;code&gt;tab&lt;/code&gt; key to give me a sketch view of the
post I am working on. Furthermore, you can even use the narrow
function to restrict the buffer showing only the section of subsection
part you are working if your file is getting large and you don&amp;rsquo;t want
to be distracted by other parts of your article.&lt;/p&gt;

&lt;p&gt;Through the writing of this post, I also using the commands moving
around sentences and paragraphs often.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org0edb567&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  move around in Org files
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;commands&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;h,j,k,l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the basic Vim keys, need no description&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the end of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of a sentence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the end of a sentence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move a paragraph up&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move a paragraph down&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-{&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of previous paragraph&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M-}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;goto the beginning of next paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;count-words&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.5&lt;/span&gt; count words&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;count-words&lt;/code&gt; is a command built in Emacs. There is a github
repository &lt;a href=&#34;https://github.com/LdBeth/advance-words-count.el&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;advance words count&amp;rdquo;&lt;/a&gt; which helps count the CJK word. If
you write in CJK language, it will be handy.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Reference&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.masteringemacs.org/article/how-to-write-a-book-in-emacs&#34; target=&#34;_blank&#34;&gt;how-to-write-a-book-in-emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs as a calculator through Cals</title>
      <link>https://zcl.space/tools/calc-in-emacs/</link>
      <pubDate>Tue, 20 Feb 2018 17:13:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/calc-in-emacs/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#main-features&#34;&gt;Main Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#switch-between-the-algebraic-and-rpn-mode&#34;&gt;switch between the algebraic and RPN mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#adding-two-numbers&#34;&gt;adding two numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#reference&#34;&gt;reference&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Introduction&lt;/h2&gt;

&lt;p&gt;In Emacs, execute &lt;code&gt;M-x calc&lt;/code&gt; and you are in a &lt;code&gt;Calc&lt;/code&gt; buffer. At first
time, perhaps you will be confused how begin. Press &lt;code&gt;?&lt;/code&gt; you will get a
help manual.&lt;/p&gt;

&lt;p&gt;Normally, Calc uses the RPN (Reverse Polish Notation) notation, which
is not the natation what I am familiar with. However, It did not take
me much time to get used to it. Generally, the core of an RPN
calculator is the stack. A calculator stack is like a stack of dishes.
New dishes are added at the top of the stack, and numbers are normally
only removed from the top of the stack. Also, in a RPN calculator,
operands are always entered first, the operator second. The calculator
pops the appropriate number of operands from the stack and pushes back
the result.&lt;/p&gt;

&lt;p&gt;Take &lt;code&gt;2+3&lt;/code&gt; for example, first, you enter 2;second , 3; at last, you
enter &lt;code&gt;+&lt;/code&gt; . Then the 2 and 3 pops from the stack and 5 are pushed on
the top of the stack.&lt;/p&gt;

&lt;h2 id=&#34;main-features&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Main Features&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Choice of algebraic or RPN entry of calculations;&lt;/li&gt;
&lt;li&gt;Arbitrary precision integers and floating-point numbers.&lt;/li&gt;
&lt;li&gt;Arithmetic on rational numbers, complex numbers (rectangular and
polar), error forms with standard deviations, open and closed
intervals, vectors and matrices, dates and times, infinities, sets,
quantities with units, and algebraic formulas.&lt;/li&gt;
&lt;li&gt;Mathematical operations such as logarithms and trigonometric
functions.&lt;/li&gt;
&lt;li&gt;Programmer&amp;rsquo;s features (bitwise operations, non-decimal numbers).&lt;/li&gt;
&lt;li&gt;Financial functions such as future value and internal rate of
return.&lt;/li&gt;
&lt;li&gt;Number theoretical features such as prime factorization and
arithmetic modulo m for any m.&lt;/li&gt;
&lt;li&gt;Algebraic manipulation features, including symbolic calculus.&lt;/li&gt;
&lt;li&gt;Moving data to and from regular editing buffers.&lt;/li&gt;
&lt;li&gt;Embedded mode for manipulating Calc formulas and data directly
inside any editing buffer.&lt;/li&gt;
&lt;li&gt;Graphics using GNUPLOT, a versatile (and free) plotting program.&lt;/li&gt;
&lt;li&gt;Easy programming using keyboard macros, algebraic formulas,
algebraic rewrite rules, or extended Emacs Lisp.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the features listed above, we can see Calc is a versatile
calculator. It is almost impossible for me to touch all the features
during daily use. Calc is large and maybe intimidating to the
first-time user. My knowledge of Calc grows as time goes by. I use
Calc every time when I want to calculate something. Day by day, I
learn more and more about Calc.&lt;/p&gt;

&lt;p&gt;This post is the record of my use of Calc.&lt;/p&gt;

&lt;h2 id=&#34;switch-between-the-algebraic-and-rpn-mode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; switch between the algebraic and RPN mode&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;calc-algebraic-entry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command is used to input an expression in the algebraic mode
temporally. After this the Calc is in RPN mode. When you execute
the &lt;code&gt;calc-algebraic-entry&lt;/code&gt; the minibuffer will be leading by the
word &lt;strong&gt;Algebraic:&lt;/strong&gt; instead of &lt;strong&gt;Calc:&lt;/strong&gt;, which is used in the RPN
mode.&lt;/p&gt;

&lt;p&gt;After the &lt;strong&gt;Algebraic:&lt;/strong&gt; you can enter your algebraic expression.&lt;/p&gt;

&lt;p&gt;In the Calc buffer, press &lt;code&gt;&#39;&lt;/code&gt; also bring you the algebraic mode.
Press &lt;code&gt;&#39;&lt;/code&gt; two times bring you the last algebraic expression you
entered.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;calc-algebraic-mode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will turn the Calc into algebraic mode. After calling
this command, every time you enter something in the Calc buffer,
the Calc is in the algebraic mode i.e. every time you enter
something , the minibuffer will be leading &lt;strong&gt;Algebraic:&lt;/strong&gt; . So any
algebraic expression is accepted. I even try the &lt;code&gt;2 + log10(100)&lt;/code&gt;
and it returns &lt;code&gt;4&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;adding-two-numbers&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; adding two numbers&lt;/h2&gt;

&lt;p&gt;In the RPN mode, you enter the first operand and the second
operand, at last you enter &lt;code&gt;+&lt;/code&gt; , then the first operand and the
second operand pops out of the stack and the result is pushed
back.&lt;/p&gt;

&lt;p&gt;subtraction, multiplication and divide are in a straightforward
way.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; reference&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2009/06/23/&#34; target=&#34;_blank&#34;&gt;The Emacs Calculator.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/calc/index.html#Top&#34; target=&#34;_blank&#34;&gt;The manual: The GNU Emacs Calculator.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Organize you life in Emacs Org</title>
      <link>https://zcl.space/tools/organize-you-life-in-org/</link>
      <pubDate>Sun, 11 Feb 2018 21:52:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/organize-you-life-in-org/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#introduction&#34;&gt;introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#my-gtd-workflow&#34;&gt;My GTD workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#some-preparations&#34;&gt;some preparations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#set-the-agenda-file&#34;&gt;set the agenda file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#set-the-refile-targets&#34;&gt;set the refile targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; &lt;a href=&#34;#set-the-org-capture-templates&#34;&gt;set the org capture templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; &lt;a href=&#34;#set-the-org-agenda-custom-commands&#34;&gt;set the org agenda custom commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#one-day-based-on-my-workflow&#34;&gt;One day based on my workflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; &lt;a href=&#34;#punch-in&#34;&gt;Punch In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; &lt;a href=&#34;#check-out-the-agenda&#34;&gt;check out the agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; &lt;a href=&#34;#focus-on-certain-project&#34;&gt;focus on certain project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; &lt;a href=&#34;#change-the-state-of-one-task&#34;&gt;change the state of one task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; &lt;a href=&#34;#using-the-mobile-phone-to-take-capture&#34;&gt;using the mobile phone to take capture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; &lt;a href=&#34;#conclusion&#34;&gt;conclusion&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; introduction&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&#34;http://spacemacs.org/&#34; target=&#34;_blank&#34;&gt;spacemacs&lt;/a&gt; I divide my Org config into servel private layers for
the sake of easy maintenance and flexibility. You can check my
&lt;a href=&#34;https://github.com/emacsun/.spacemacs.d&#34; target=&#34;_blank&#34;&gt;.spacemacs.d&lt;/a&gt; on github. I suggest you excerpt some of my config
instead of copying all of them because some of them maybe not what you
want.&lt;/p&gt;

&lt;p&gt;Based on the comprehensive tutorial &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt;,
I build my own GTD system using Org. Actually, there exists quite a
few posts on building personal GTD system through Emacs Org. Some
excellent ones are listed as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; . This article is the starting
point of my serious using of Emacs Org as GTD tool. It is quite
long, but deserves spending time to read it. It pays off.
Furthermore, reading just one time is not enough. Perhaps you
will visit this post several times before your GTD system is
handy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/&#34; target=&#34;_blank&#34;&gt;Using org-mode as a Day Planner&lt;/a&gt; . This article describe how the
author replace pen-and-paper day planner with the Emacs Org.
After trying many software available, the author choose Emacs
Org.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html&#34; target=&#34;_blank&#34;&gt;How I use Emacs and Org-mode to implement GTD&lt;/a&gt; . The author&amp;rsquo;s job
is developing classroom training materials and E-Learning
solutions for a software company based in North Sydney. It&amp;rsquo;s
also worthwhile to give the article a shot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am not interested in listing all the articles. What I want to say
is that you need to define your need first. After that you can
excerpt the config from other&amp;rsquo;s implement. Most of the time you
will modify other&amp;rsquo;s config before Org is handy for you. So some
knowledge of Elisp is desirable.&lt;/p&gt;

&lt;h2 id=&#34;my-gtd-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; My GTD workflow&lt;/h2&gt;

&lt;p&gt;First let me introduce my GTD workflow. In general, a task in my GTD
workflow will go the road shown as below whick is the same as show in
&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Organize Your Life In Plain Text&lt;/a&gt; but with different triggering
conditions:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org6e81c32&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210myworkflow.png&#34; alt=&#34;Figure 1: state transitions for a task in my workflow&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: state transitions for a task in my workflow
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The main features are listed below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every moment, for the sake of clearing my head, I capture all the
ideas or some todos jumping into my head during my handling one
event. I will handle the capture later.&lt;/li&gt;
&lt;li&gt;Every morning, I check the my agenda which is generated by a
combination of ten commends.&lt;/li&gt;
&lt;li&gt;I check the scheduled tasks and the tasks which is near the
deadline.&lt;/li&gt;
&lt;li&gt;After the scheduled one and the deadlined one, I take a &lt;code&gt;NEXT&lt;/code&gt;
task, which is in &lt;code&gt;NEXT&lt;/code&gt; status. Also, I start a clock under such
task.&lt;/li&gt;
&lt;li&gt;After finishing the &lt;code&gt;NEXT&lt;/code&gt; tasks, the &lt;code&gt;NEXT&lt;/code&gt; status will be changed
to &lt;code&gt;DONE&lt;/code&gt; automatically. Then I pick a new task in the &lt;code&gt;TODO&lt;/code&gt; lists
and change the &lt;code&gt;TODO&lt;/code&gt; status into &lt;code&gt;NEXT&lt;/code&gt;. Everytime I change a
&lt;code&gt;TODO&lt;/code&gt;  task into a &lt;code&gt;NEXT&lt;/code&gt; task, clock is running under that task
automatically.&lt;/li&gt;
&lt;li&gt;After finishing all the &lt;code&gt;TODO&lt;/code&gt; tasks, I check the &lt;code&gt;DONE&lt;/code&gt; list to see
if there is any tasks need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;some-preparations&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; some preparations&lt;/h2&gt;

&lt;p&gt;In order to run the GTD, some preparations are needed.&lt;/p&gt;

&lt;h3 id=&#34;set-the-agenda-file&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; set the agenda file&lt;/h3&gt;

&lt;p&gt;To use Org as a GTD tool, the first thing is to setup the
&lt;code&gt;org-agenda-files&lt;/code&gt; ;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;set up the agenda files
(setq org-agenda-files (list &amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot;
                             &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I put my configs into the Dropbox directory, so that
my config will never lose even if I delete them from the local
carelessly.&lt;/p&gt;

&lt;p&gt;Notice that there is a file named &amp;ldquo;zrefile.org&amp;rdquo; which is the entrance
of all my todos and some other captures. It plays as an inbox.
Everytime I check this file and take actions to clean it. All this can
be done in the agenda buffer, which I will explain later. To refile
the items in the refile.org, I need to set up the refile targets.&lt;/p&gt;

&lt;h3 id=&#34;set-the-refile-targets&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; set the refile targets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-refile-targets (quote (
          (&amp;quot;~/zorg/Dropbox/base/zwork.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/Dropbox/base/zlife.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; :maxlevel . 6)
          (&amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; :maxlevel . 6))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, besides the zwork.org and zlife.org which are the agenda
files, there are other five org files. These five org files are for my
personal blog. Sometime, I capture a draft or outline of a new post in
the zrefile.org, so I need to refile these drafts into the right
category.&lt;/p&gt;

&lt;p&gt;To understand why I add these extra five org files as the refile
targets, you need to see my &lt;code&gt;org-capture-templates&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-capture-templates&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.3&lt;/span&gt; set the org capture templates&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39;(
        (&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;h&amp;quot; &amp;quot;Hugo post&amp;quot;)
        (&amp;quot;hm&amp;quot; &amp;quot;Math&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; &amp;quot;Math&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         &amp;quot;:math:&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;hc&amp;quot; &amp;quot;Computer&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; &amp;quot;Computer&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ht&amp;quot; &amp;quot;Telecommunication&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; &amp;quot;Telecommunication&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;Life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ho&amp;quot; &amp;quot;Tools&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; &amp;quot;Tools&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hm&amp;quot; &amp;quot;movie&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Movie&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/all-posts.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
         (&amp;quot;l&amp;quot; &amp;quot;my Log Time&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/ztimelog.org&amp;quot; ) &amp;quot;** %T - %?  :timelog:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;d&amp;quot; &amp;quot;diary&amp;quot; entry (file+datetree &amp;quot;~/zorg/Dropbox/base/zdiary.org&amp;quot; ) &amp;quot;* %t - %?  :diary:&amp;quot; :clock-in t :clock-resume t)
        (&amp;quot;x&amp;quot; &amp;quot;org-protocol&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO Review %c \n Added:%T\n&amp;quot;)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have a template for &lt;code&gt;zrefile.org&lt;/code&gt; which is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
 &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
 :clock-in t :clock-resume t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand the meaning of this template, you need to read the doc
for variable &lt;code&gt;org-capture-templates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;whenever I check the org-agenda, I will see a block contains all the
need-to-refile tasks. So you may curious about my set of
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-the-org-agenda-custom-commands&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.4&lt;/span&gt; set the org agenda custom commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-agenda-custom-commands
        (quote (
                (&amp;quot; &amp;quot; &amp;quot;Agenda&amp;quot;
                 ((agenda &amp;quot;&amp;quot; )
                  (tags &amp;quot;NOTES&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;NOTES to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags &amp;quot;REFILE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Refile&amp;quot;)
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo &amp;quot;-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Stuck Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-HOLD-CANCELLED/!&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Projects&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down category-keep))))
                  (tags-todo &amp;quot;-CANCELLED/!NEXT&amp;quot;
                             ((org-agenda-overriding-header &amp;quot;Project NEXT Tasks&amp;quot;)
                              (org-agenda-skip-function &#39;bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               &#39;(priority-down todo-state-down effort-up category-keep))))
                  (todo &amp;quot;TODO&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks TODO&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  (todo &amp;quot;DONE&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Project Subtasks DONE&amp;quot;)
                         (org-tags-match-list-sublevels t)))
                  ;;;;(tags-todo &amp;quot;-CANCELLED+WAITING+HOLD/!&amp;quot;
                  (todo &amp;quot;HOLD&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Waiting and Postponed Tasks&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-stuck-projects)
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-todo-ignore-scheduled &#39;future)
                         (org-agenda-todo-ignore-deadlines &#39;future)))
                  (tags &amp;quot;-REFILE/&amp;quot;
                        ((org-agenda-overriding-header &amp;quot;Tasks to Archive&amp;quot;)
                         (org-agenda-skip-function &#39;bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should never copy the above snippet, because there are some
functions whose definitions are not contained in the snippet.
Actually, you should go to my Github page to get the repository if you
are interested in my .spacemacs.d&lt;/p&gt;

&lt;p&gt;According to the command, one of the sample of my org agenda may look
like:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb6363e7&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda.png&#34; alt=&#34;Figure 2: my org agenda sample&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 2: my org agenda sample
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I have three projects: math,computer and communication
(telecommunication). For each projects, there are some tasks. All the
projects appear as level-1 headlines in the org file and the tasks
appear as sub-level headlines. If all the tasks under one project are
in &lt;code&gt;TODO&lt;/code&gt; state, the project is stuck. If at least one of the task
under one project is in &lt;code&gt;NEXT&lt;/code&gt; state, the project is running.&lt;/p&gt;

&lt;p&gt;I think the structure of my agenda buffer is straightforward. you can
define your own &lt;code&gt;org-agenda-custom-commands&lt;/code&gt; by reading the manual and
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;one-day-based-on-my-workflow&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; One day based on my workflow&lt;/h2&gt;

&lt;h3 id=&#34;punch-in&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.1&lt;/span&gt; Punch In&lt;/h3&gt;

&lt;p&gt;At the beginning of every day, I use &lt;code&gt;F8 I&lt;/code&gt; to punch in, which starts
a clock under a task called Organization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defvar bh/organization-task-id &amp;quot;eb155a82-92b2-4f25-a3c6-0304591af2f9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-out-the-agenda&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.2&lt;/span&gt; check out the agenda&lt;/h3&gt;

&lt;p&gt;Check out the agenda, using &lt;code&gt;org-agenda&lt;/code&gt; which is bound to &lt;code&gt;SPC a o o
SPC&lt;/code&gt; or &lt;code&gt;SPC o a SPC&lt;/code&gt; or &lt;code&gt;F5 SPC&lt;/code&gt; . Because the &lt;code&gt;org-agenda&lt;/code&gt; buffer
will be visited quite a few times, I bind this command to several
shortcuts. Using the customed command &lt;code&gt;SPC&lt;/code&gt; , I collect all the
projects,  tasks with &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;NEXT&lt;/code&gt; states in the project which
give me an overview of what should be done next and what should be
started next.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgb1042c6&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda2.png&#34; alt=&#34;Figure 3: my org agenda overview&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 3: my org agenda overview
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As we can see from the screenshot, the agenda of today is listed at
the beginning with scheduled task and deadline task.&lt;/p&gt;

&lt;p&gt;Following today&amp;rsquo;s agenda, several blocks are displayed with each
headline in green color and large font size. Those blocks shows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Notes to Refile&lt;/strong&gt;, which is the draft of a post which should be
refile to math.org computer.org or telecommunication.org.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Refile&lt;/strong&gt;, which is the Ideas or tasks hitting my head
during handling one tasks. I store these tasks in zrefile.org then
process them later after finishing current tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stuck Projects&lt;/strong&gt;, which are the projects have no sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projects&lt;/strong&gt;, which are the projects have at least one sub-tasks in
&lt;code&gt;NEXT&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Next Tasks&lt;/strong&gt;, which are &lt;code&gt;NEXT&lt;/code&gt; sub-tasks in all Projects.
In particular, you can filter out the &lt;code&gt;NEXT&lt;/code&gt; tasks belonging to
certain project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks TODO&lt;/strong&gt;, which are all the &lt;code&gt;TODO&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Subtasks DONE&lt;/strong&gt;, which are all the &lt;code&gt;DONE&lt;/code&gt; sub-tasks
belonging to all projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waiting and Postponed Tasks&lt;/strong&gt;, which are all the tasks in &lt;code&gt;WAITING&lt;/code&gt;
and &lt;code&gt;HOLD&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tasks to Archive&lt;/strong&gt;, which are the tasks being tagged as &lt;code&gt;DONE&lt;/code&gt; for
a period and need to be archived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;focus-on-certain-project&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.3&lt;/span&gt; focus on certain project&lt;/h3&gt;

&lt;p&gt;If you have many &lt;code&gt;TODO&lt;/code&gt; tasks, it is desirable to focus on certain
project at one time. Just move the cursor on the Project you want to
focus, then press &lt;code&gt;^&lt;/code&gt; . If you want to focus on another project, press
&lt;code&gt;^&lt;/code&gt; again then select another project, press &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org88f3fa1&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/img/tools/20180210orgagenda3.png&#34; alt=&#34;Figure 4: focus on certain project&#34; width=&#34;900&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 4: focus on certain project
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Actually, there are quite a few commands helping you coin your own
view of the agenda buffer. some handy are listed below:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org2b4b0ac&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  some handy agenda commands
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;shortcuts&lt;/th&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-tag&lt;/td&gt;
&lt;td&gt;Filter the agenda view with respect to a tag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-category&lt;/td&gt;
&lt;td&gt;Filter the current agenda view with respect to the category of the item at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-top-headline&lt;/td&gt;
&lt;td&gt;Filter the current agenda view and only display the siblings and the parent headline of the one at point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-regexp&lt;/td&gt;
&lt;td&gt;Filter the agenda view by a regular expression&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;org-agenda-filter-by-effort&lt;/td&gt;
&lt;td&gt;filter the agenda view with respect to effort estimates&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can find more agenda commands by reading &lt;code&gt;Agenda views&lt;/code&gt; part of
the Org manual which is built in the Emacs.&lt;/p&gt;

&lt;h3 id=&#34;change-the-state-of-one-task&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.4&lt;/span&gt; change the state of one task&lt;/h3&gt;

&lt;p&gt;It is quite easy to change the state of one task. By default, the
state is in &lt;code&gt;TODO&lt;/code&gt; state. After start clocking the task, the task will
be in &lt;code&gt;NEXT&lt;/code&gt; state automatically.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;NEXT&lt;/code&gt; to other state, you just use &lt;code&gt;C-c C-t&lt;/code&gt; . If you are in the
org agenda buffer, press &lt;code&gt;t&lt;/code&gt; one the line of the task.&lt;/p&gt;

&lt;p&gt;Once the task is set as &lt;code&gt;DONE&lt;/code&gt; , a temporary buffer will jump out and
let you take some note to record the task.&lt;/p&gt;

&lt;h3 id=&#34;using-the-mobile-phone-to-take-capture&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4.5&lt;/span&gt; using the mobile phone to take capture&lt;/h3&gt;

&lt;p&gt;In general, there are two app one is &lt;code&gt;Org-mobile&lt;/code&gt; and the another one
is &lt;code&gt;BeOrg&lt;/code&gt;. I prefer to the later because of is easy to use. All you
have to do is put your agenda files in a Dropbox directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Org-mobile&lt;/code&gt; is kind of complex, and need to config both on the phone
and the PC. I finally make it run on both my iPhone and Surface pro 4.
However, I resort to &lt;code&gt;BeOrg&lt;/code&gt; because you will never forget how to use
&lt;code&gt;BeOrg&lt;/code&gt; . Unfortunately, I forget how to use &lt;code&gt;Org-mobile&lt;/code&gt; after I did
not use it for a month.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; conclusion&lt;/h2&gt;

&lt;p&gt;My GTD workflow based on Org is summarized. To be honest, I change my
workflow quite often. So the configuration will change subsequently
which is the source of joy using Emacs. You can always config it as
handy as possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blogging with Emacs Org</title>
      <link>https://zcl.space/tools/my-blog-workflow/</link>
      <pubDate>Sun, 28 Jan 2018 18:01:00 +0800</pubDate>
      
      <guid>https://zcl.space/tools/my-blog-workflow/</guid>
      <description>

&lt;p&gt;&lt;style&gt;
  .ox-hugo-toc ul {
    list-style: none;
  }
&lt;/style&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; &lt;a href=&#34;#writing-with-emacs-org-publish&#34;&gt;Writing with Emacs Org publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; &lt;a href=&#34;#writing-with-hugo&#34;&gt;Writing with Hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; &lt;a href=&#34;#architecture-of-the-site&#34;&gt;architecture of the site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; &lt;a href=&#34;#settings-for-ox-hugo&#34;&gt;Settings for ox-hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; &lt;a href=&#34;#settings-for-each-section-based-on-ox-hugo&#34;&gt;settings for each section based on ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; &lt;a href=&#34;#settings-for-each-article-based-on-ox-hugo&#34;&gt;settings for each article based on ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; &lt;a href=&#34;#settings-for-hugo-themes&#34;&gt;Settings for Hugo themes&lt;/a&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right Now, I use two blog systems to post articles. First, I use the Emacs
built-in Org to record my learning on math, computer and wireless
communication. For me, the built-in publishing system is obsolete (I am not
saying Org is obsolete. My life rely heavily on Org.) because I find the
second one is more interesting and flexible to config. The second one is
Hugo. Naturally, the Hugo support markdown format. However, I want to use
Emacs Org to maintain a tools consistency. Fortunately, there is &lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;ox-hugo&lt;/a&gt;, a
project bridging Emacs org and Hugo markdown. Ox-hugo allows you to write
your blog using Emacs Org then publish them in the markdwon format
automatically.&lt;/p&gt;

&lt;h2 id=&#34;writing-with-emacs-org-publish&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Writing with Emacs Org publish&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to build a static website using &lt;a href=&#34;https://orgmode.org/manual/Publishing.html&#34; target=&#34;_blank&#34;&gt;Emacs Org&lt;/a&gt;. &lt;a href=&#34;https://orgmode.org/worg/&#34; target=&#34;_blank&#34;&gt;Worg&lt;/a&gt;, the Org-mode
community, also have comprehensive tutorials about using Org to build your
own static site. To be honest, worg should be every serious Org users&amp;rsquo;
starting point. So many Org experts contribute their summary of Org in
high-quality articles on the Worg.&lt;/p&gt;

&lt;p&gt;In general, through Emacs Org mode, all you need is to set the variable
&lt;code&gt;org-publish-project-alist&lt;/code&gt; . Of course, if you want your site beautiful,
some knowledge about CSS and JavaScript is necessary.&lt;/p&gt;

&lt;h2 id=&#34;writing-with-hugo&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Writing with Hugo&lt;/h2&gt;

&lt;p&gt;Now, I moved from the Emacs built-in publishing system to Hugo because of
Hugo&amp;rsquo;s efficiency and flexibility. You can build your static site in just a
few minutues. One major problem of the built-in publishing system is that
you have to wait for a long time as your site gets larger and larger. When
you have only several posts, there is no problem. However, when you have more
than one hundred posts, you want to kill yourself during waiting the
publishing.&lt;/p&gt;

&lt;p&gt;Using Hugo, everything is easy. Post an article is at the fingure.However,
if you want to write a post, it is prioritized to finished it in the github
format markdown. For a guy who rarely use markdown and is familiar with
Emacs Org, this constraint is not human. Fortunately, &lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34; target=&#34;_blank&#34;&gt;Ox-hugo&lt;/a&gt;, a carefuly
crafted Org exporter backend for Hugo, is definitely worth a try. Ox-hugo
bridge the Emacs Org and Hugo and make the workflow at a fly. Even though,
Hugo supports to write the posts in Org format, Ox-hugo still is a sharp
tool which I will not give up and highly recommend it.&lt;/p&gt;

&lt;p&gt;Especially, there is tons of themes for you. Also, you can set up your own
theme.&lt;/p&gt;

&lt;h3 id=&#34;architecture-of-the-site&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; architecture of the site&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;hugo&lt;/code&gt; , there is a default architecture. Using &lt;code&gt;ox-hugo&lt;/code&gt; , I store
the Org file in the subdirectory &lt;code&gt;content-org&lt;/code&gt; . There are several sections
for my static site such &lt;code&gt;math&lt;/code&gt; , &lt;code&gt;computer&lt;/code&gt; and &lt;code&gt;communication&lt;/code&gt; . I store
the articles in the corresponding category. For example I will put an
article on &lt;em&gt;mathematical analysis&lt;/em&gt; in the file named &lt;code&gt;content-org/math.org&lt;/code&gt;
so that after exporting, the markdown file will be put in the subdirectory
&lt;code&gt;content/math/&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org799910a&#34;&gt;&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://zcl.space/tools/20180126HugoArchitecture.png&#34; alt=&#34;Figure 1: architecture of Hugo project&#34; width=&#34;400&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Figure 1: architecture of Hugo project
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;settings-for-ox-hugo&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Settings for ox-hugo&lt;/h2&gt;

&lt;h3 id=&#34;settings-for-each-section-based-on-ox-hugo&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; settings for each section based on ox-hugo&lt;/h3&gt;

&lt;p&gt;As mentioned before, there are several sections for my site and I use
ox-hugo to handle articles for this sections. In the subdirectory
&lt;code&gt;content-org/&lt;/code&gt; , there are several &lt;code&gt;*.org&lt;/code&gt; files such as &lt;code&gt;math.org&lt;/code&gt; ,
&lt;code&gt;computer.org&lt;/code&gt; , &lt;code&gt;communications.org&lt;/code&gt; and &lt;code&gt;tools.org&lt;/code&gt; . All these &lt;code&gt;.org&lt;/code&gt;
files have multiple level-1 headlines. for each level-1 headline, there is
one article. I use one-post-per-Org-subtree style preferred in the ox-hugo
&lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;document&lt;/a&gt; but one-section-per-Org-file style for each section. The
one-section-per-Org-file style is kind of like one-post-per-Org-file
mentioned in the ox-hugo &lt;a href=&#34;https://ox-hugo.scripter.co/&#34; target=&#34;_blank&#34;&gt;document&lt;/a&gt;. So I have a hybrid style.&lt;/p&gt;

&lt;p&gt;For each section, I have to set some parameters properly so that the
articles goes to the right postion. Take &lt;code&gt;math.org&lt;/code&gt; for example, the
beginning of this file is like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: math
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+FILETAGS: math
#+OPTIONS:   *:t &amp;lt;:nil timestamp:nil toc:t
#+HUGO_AUTO_SET_LASTMOD: t
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;the first line tells &lt;code&gt;ox-hugo&lt;/code&gt; the targeting directory is &lt;code&gt;../content/&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;the second line tells &lt;code&gt;ox-hugo&lt;/code&gt; the article goes to &lt;code&gt;../content/math&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;the third line is the Org state of the article, &lt;code&gt;TODO&lt;/code&gt; will render the
article a draft while &lt;code&gt;DONE&lt;/code&gt; a finished post.&lt;/li&gt;
&lt;li&gt;the fourth line will tell the Org all the headlines of this file has the
tag &lt;code&gt;math&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;at the fifth line. &lt;code&gt;*:t&lt;/code&gt; will toggle emphasized text. &lt;code&gt;&amp;lt;:nil&lt;/code&gt; means the
timestamp will not be exported. &lt;code&gt;timestamp:nil&lt;/code&gt; means the creation time
will not be exported. &lt;code&gt;toc:t&lt;/code&gt; means for the articles table of content is
generated. More settings like these will be detailed in the &lt;code&gt;Org&lt;/code&gt;
manual. (You can open the Org manual by &lt;code&gt;C-h i&lt;/code&gt; ,then seclect the Org
section.) On table of contents, ox-hugo has an &lt;a href=&#34;https://ox-hugo.scripter.co/doc/org-toc&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the sixth line tells ox-hugo to export the latest time when the article
is modified.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;settings-for-each-article-based-on-ox-hugo&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.2&lt;/span&gt; settings for each article based on ox-hugo&lt;/h3&gt;

&lt;p&gt;I use the &lt;code&gt;org-capture&lt;/code&gt; to start a article. The emacs-lisp:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39;(
        (&amp;quot;t&amp;quot; &amp;quot;todo&amp;quot; entry (file &amp;quot;~/zorg/Dropbox/base/zrefile.org&amp;quot;)
         &amp;quot;* TODO %? :TODO: \n Added:%T\n&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;h&amp;quot; &amp;quot;Hugo post&amp;quot;)
        (&amp;quot;hm&amp;quot; &amp;quot;Math&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/math.org&amp;quot; &amp;quot;Math&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         &amp;quot;:math:&amp;quot;
         :clock-in t :clock-resume t)
        (&amp;quot;hc&amp;quot; &amp;quot;Computer&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/computer.org&amp;quot; &amp;quot;Computer&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ht&amp;quot; &amp;quot;Telecommunication&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/telecommunication.org&amp;quot; &amp;quot;Telecommunication&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;hl&amp;quot; &amp;quot;Life&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/life.org&amp;quot; &amp;quot;Life&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        (&amp;quot;ho&amp;quot; &amp;quot;Tools&amp;quot;
         entry (file+olp &amp;quot;~/zorg/zcl.space/content_org/tools.org&amp;quot; &amp;quot;Tools&amp;quot;)
         (function org-hugo-new-subtree-post-capture-template)
         :clock-in t :clock-resume t)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above code, you can see that I rely heavily on ox-hugo. there is one
function named &lt;code&gt;org-hugo-new-subtree-post-capture-template&lt;/code&gt; which is shown
as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (defun org-hugo-new-subtree-post-capture-template ()
    &amp;quot;Returns `org-capture&#39; template string for new Hugo post.
See `org-capture-templates&#39; for more information.&amp;quot;
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
           (title (read-from-minibuffer &amp;quot;Post Title: &amp;quot;)) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #&#39;identity
                 `(
                   ,(concat &amp;quot;* TODO &amp;quot; title)
                   &amp;quot;:PROPERTIES:&amp;quot;
                   ,(concat &amp;quot;:EXPORT_FILE_NAME: &amp;quot; fname)
                   ,(concat &amp;quot;:EXPORT_DATE: &amp;quot; date) ;Enter current date and time
                   ,(concat &amp;quot;:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: &amp;quot;  &amp;quot;:summary \&amp;quot;summary\&amp;quot;&amp;quot;)
                   &amp;quot;:END:&amp;quot;
                   &amp;quot;%?\n&amp;quot;)          ;Place the cursor here finally
                 &amp;quot;\n&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One more point, it is awesome to preview each article after saveing it.
Yes! you can do it according &lt;a href=&#34;https://ox-hugo.scripter.co/doc/auto-export-on-saving&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;settings-for-hugo-themes&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; Settings for Hugo themes&lt;/h2&gt;

&lt;p&gt;Now, there are more than 190+ &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;themes&lt;/a&gt; for Hugo. It is pretty straightforward
to &lt;a href=&#34;https://gohugo.io/themes/&#34; target=&#34;_blank&#34;&gt;install and config&lt;/a&gt; a theme as you wish. I prefer the &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic theme&lt;/a&gt; which I
adopt for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is easy manage my post according to different categories.&lt;/li&gt;
&lt;li&gt;I love the widget most.&lt;/li&gt;
&lt;li&gt;support of \(\mathrm{\LaTeX}\) so I can with the mathematical expressions
fluently.&lt;/li&gt;
&lt;li&gt;Responsive and mobile friendly.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;easy to update.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34; target=&#34;_blank&#34;&gt;several ways&lt;/a&gt; to install the Academic theme. I use the Academic
Kickstart way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The very reason I use the Kickstart way lies in the updatation of Academic.
In the Kickstart way, Academic is installed as a Git sub-module.&lt;/p&gt;

&lt;p&gt;If you want to update the theme,all you have to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule update --remote --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, for different methods of updating the theme, you can check &lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
